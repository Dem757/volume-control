<Window
    x:Class="VolumeControl.Mixer"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Collections="clr-namespace:VolumeControl.WPF.Collections;assembly=VolumeControl.WPF"
    xmlns:Controls="clr-namespace:VolumeControl.WPF.Controls;assembly=VolumeControl.WPF"
    xmlns:b="clr-namespace:VolumeControl.WPF.Bindings;assembly=VolumeControl.WPF"
    xmlns:conv="clr-namespace:VolumeControl.WPF.Converters;assembly=VolumeControl.WPF"
    xmlns:ctrlz="urn:controlzex"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helpers="clr-namespace:VolumeControl.Helpers"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ssui="clr-namespace:SolidShineUi;assembly=SolidShineUi"
    x:Name="window"
    Title="Volume Control"
    Closing="Window_Closing"
    DataContext="{RelativeSource Self}"
    Icon="/Resources/icons/icon-16x16-VC.ico"
    Initialized="Window_Initialized"
    Loaded="Window_Loaded"
    StateChanged="Window_StateChanged"
    mc:Ignorable="d">
    <Window.Background>
        <SolidColorBrush Color="#EE303030" />
    </Window.Background>

    <Window.Style>
        <!--  Set Window Style Properties  -->
        <Style TargetType="Window">
            <Setter Property="SizeToContent" Value="WidthAndHeight" />
            <Setter Property="WindowStyle" Value="SingleBorderWindow" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Width" Value="500" />
            <Setter Property="UseLayoutRounding" Value="True" />
            <Setter Property="ResizeMode" Value="CanMinimize" />
            <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}" />
            <Setter Property="FontFamily" Value="{StaticResource InterFont}" />
        </Style>
    </Window.Style>

    <!--  ( Static Resources )  -->
    <Window.Resources>
        <ResourceDictionary>
            <!--  CheckBox  -->
            <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Background" Value="#808080" />
                        <Setter Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                </Style.Triggers>
                <Style.Resources>
                    <conv:BoolToThicknessConverter x:Key="ThreeStateConverter" />
                    <conv:BoolToCheckVisibleConverter x:Key="ThreeStateVisibilityConverter" />
                </Style.Resources>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <BulletDecorator Name="BulletDecorator" Background="#00000000">
                                <BulletDecorator.Bullet>
                                    <Border
                                        Width="12"
                                        Height="12"
                                        Background="#00000000"
                                        BorderBrush="{TemplateBinding Background}"
                                        BorderThickness="1">
                                        <!--  USE TAG TO PASS INDETERMINATE STATE  -->
                                        <Border
                                            Width="8"
                                            Height="8"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="#00000000">
                                            <Border.Style>
                                                <Style TargetType="{x:Type Border}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                            <Setter Property="BorderThickness" Value="2" />
                                                            <Setter Property="Visibility" Value="Visible" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                            <Setter Property="BorderThickness" Value="0" />
                                                            <Setter Property="Visibility" Value="Hidden" />
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                            <Setter Property="BorderThickness" Value="0" />
                                                            <Setter Property="Visibility" Value="Visible" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                        </Border>
                                    </Border>
                                </BulletDecorator.Bullet>
                                <ContentPresenter Margin="3,0,0,0" />
                            </BulletDecorator>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ClickMode" Value="Press" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Background" Value="#B0B0B0" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="BorderThickness" Value="0" />
            </Style>
            <!--  Button  -->
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="#A0A0A0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="ButtonMouseOver" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonMouseOver" Property="Background" Value="#B0B0B0" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonMouseOver" Property="Background" Value="#C0C0C0" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Margin" Value="3,1,3,1" />
                <Setter Property="Height" Value="22" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Foreground" Value="#050505" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Style>
            <!--  TextBox  -->
            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Background" Value="#303030" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="BorderBrush" Value="#AAA" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="SelectionBrush" Value="#569DE5" />
                <Setter Property="SelectionOpacity" Value="0.5" />
                <Setter Property="Padding" Value="3" />
            </Style>
            <!--  Label  -->
            <Style x:Key="LabelStyle" TargetType="Label">
                <Style.Triggers>
                    <!--  Change the color of label text when disabled to something visible  -->
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Background" Value="#00000000" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <!--  Mixer Header Brushes  -->
            <LinearGradientBrush x:Key="MixerHeaderBrush" Opacity="0.5" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#454545" />
                <GradientStop Offset="0.2" Color="#353535" />
                <GradientStop Offset="0.5" Color="#202020" />
                <GradientStop Offset="0.8" Color="#353535" />
                <GradientStop Offset="0.9" Color="#454545" />
            </LinearGradientBrush>
            <!--  Mixer Headers  -->
            <Style x:Key="MixerHeadersStyle" TargetType="DataGridColumnHeader">
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Height" Value="24" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="Background" Value="{StaticResource MixerHeaderBrush}" />
                <Setter Property="BorderBrush" Value="Gainsboro" />
                <Setter Property="BorderThickness" Value="0,0,0,1" />
            </Style>
            <!--  Border Style  -->
            <Style x:Key="BorderStyle" TargetType="Border">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="Gainsboro" />
            </Style>
            <!--  Mixer Cell  -->
            <Style x:Key="MixerCellStyle" TargetType="DataGridCell">
                <Setter Property="Background" Value="#00000000" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
            </Style>
            <!--  Mixer Volume Slider  -->
            <Style x:Key="MixerVolumeSliderStyle" TargetType="Slider">
                <Setter Property="Background" Value="#00000000" />
                <Setter Property="Minimum" Value="0" />
                <Setter Property="Maximum" Value="100" />
            </Style>
            <!--  DataGrid  -->
            <Style x:Key="DataGridStyle" TargetType="DataGrid">
                <Setter Property="Background" Value="#00000000" />
                <Setter Property="RowBackground" Value="#303030" />
                <Setter Property="AlternatingRowBackground" Value="#454545" />
                <Setter Property="ColumnHeaderStyle" Value="{StaticResource MixerHeadersStyle}" />
                <Setter Property="CellStyle" Value="{StaticResource MixerCellStyle}" />
                <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
                <Setter Property="AlternationCount" Value="1" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="HeadersVisibility" Value="Column" />
                <Setter Property="SelectionUnit" Value="Cell" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="GridLinesVisibility" Value="Horizontal" />
            </Style>
            <!--  TabControl  -->
            <Style x:Key="TabControlStyle" TargetType="ctrlz:TabControlEx">
                <Setter Property="Background" Value="#505055" />
                <Setter Property="Foreground" Value="WhiteSmoke" />
            </Style>

            <ResourceDictionary x:Key="ComboBoxResources">
                <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#FFF" />
                            <GradientStop Offset="1.0" Color="#CCC" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#FFF" />
                            <GradientStop Offset="1.0" Color="#CCC" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#FFF" />
                            <GradientStop Offset="1.0" Color="#EEE" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#FFF" />
                            <GradientStop Offset="1.0" Color="#EEE" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#FFF" />
                            <GradientStop Offset="1.0" Color="#AAA" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#BBB" />
                            <GradientStop Offset="0.1" Color="#EEE" />
                            <GradientStop Offset="0.9" Color="#EEE" />
                            <GradientStop Offset="1.0" Color="#FFF" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

                <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

                <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#303030" />

                <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

                <!--  Border Brushes  -->

                <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#CCC" />
                            <GradientStop Offset="1.0" Color="#444" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#CCC" />
                            <GradientStop Offset="1.0" Color="#444" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#777" />
                            <GradientStop Offset="1.0" Color="#000" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0.0" Color="#444" />
                            <GradientStop Offset="1.0" Color="#888" />
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

                <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

                <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

                <!--  Miscellaneous Brushes  -->
                <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

                <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
            </ResourceDictionary>

            <ControlTemplate
                x:Key="ComboBoxToggleButton"
                Resources="{StaticResource ComboBoxResources}"
                TargetType="ToggleButton">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Border
                        x:Name="Border"
                        Grid.ColumnSpan="2"
                        Background="{StaticResource NormalBrush}"
                        BorderBrush="{StaticResource NormalBorderBrush}"
                        BorderThickness="2,1,1,1"
                        CornerRadius="0" />
                    <Border
                        Grid.Column="0"
                        Margin="0"
                        Background="{StaticResource WindowBackgroundBrush}"
                        BorderBrush="{StaticResource NormalBorderBrush}"
                        BorderThickness="0,0,1,0" />
                    <Path
                        x:Name="Arrow"
                        Grid.Column="1"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 4 4 L 8 0 Z"
                        Fill="{StaticResource GlyphBrush}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                    </Trigger>
                    <Trigger Property="ToggleButton.IsChecked" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
                <Border
                    x:Name="PART_ContentHost"
                    Background="{TemplateBinding Background}"
                    Focusable="False" />
            </ControlTemplate>

            <Style
                x:Key="ComboBoxCustomStyle"
                Resources="{StaticResource ComboBoxResources}"
                TargetType="ComboBox">
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Grid>
                                <Border BorderBrush="#AAA" BorderThickness="1" />
                                <Grid Margin="1">
                                    <ToggleButton
                                        Name="ToggleButton"
                                        Grid.Column="2"
                                        ClickMode="Press"
                                        Focusable="false"
                                        IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                        Template="{StaticResource ComboBoxToggleButton}" />
                                    <ContentPresenter
                                        Name="ContentSite"
                                        Margin="3,3,23,3"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                        IsHitTestVisible="False" />
                                    <TextBox
                                        x:Name="PART_EditableTextBox"
                                        Margin="3,3,23,3"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Background="#00000000"
                                        Focusable="True"
                                        IsReadOnly="{TemplateBinding IsReadOnly}"
                                        Style="{x:Null}"
                                        Template="{StaticResource ComboBoxTextBox}"
                                        Visibility="Hidden" />
                                    <Popup
                                        Name="Popup"
                                        AllowsTransparency="True"
                                        Focusable="False"
                                        IsOpen="{TemplateBinding IsDropDownOpen}"
                                        Placement="Bottom"
                                        PopupAnimation="Slide">
                                        <Grid
                                            Name="DropDown"
                                            MinWidth="{TemplateBinding ActualWidth}"
                                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                            SnapsToDevicePixels="True">
                                            <Border
                                                x:Name="DropDownBorder"
                                                Background="{StaticResource WindowBackgroundBrush}"
                                                BorderBrush="{StaticResource SolidBorderBrush}"
                                                BorderThickness="1" />
                                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                            </ScrollViewer>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                                </Trigger>
                                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                                </Trigger>
                                <Trigger Property="IsEditable" Value="true">
                                    <Setter Property="IsTabStop" Value="false" />
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers />
            </Style>

            <!--  ComboBox  -->
            <Style
                x:Key="ComboBoxStyle"
                BasedOn="{StaticResource ComboBoxCustomStyle}"
                TargetType="ComboBox">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="#404040" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True">
                        <Setter Property="Foreground" Value="WhiteSmoke" />
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="BorderThickness" Value="3" />
                <Setter Property="BorderBrush" Value="Gainsboro" />
                <Setter Property="AlternationCount" Value="1" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="IsTextSearchCaseSensitive" Value="False" />
                <Setter Property="Margin" Value="0,1,0,1" />
                <Setter Property="Padding" Value="0" />
            </Style>
            <!--  TextBlock  -->
            <Style x:Key="TextBlockStyle" TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Foreground" Value="WhiteSmoke" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <!--  Watermark TextBlock  -->
            <Style
                x:Key="WatermarkTextBlockStyle"
                BasedOn="{StaticResource TextBlockStyle}"
                TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="LightGray" />
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Foreground" Value="#9A9A9A" />
                <Setter Property="IsHitTestVisible" Value="False" />
            </Style>

            <!--  EventTypeOptions (VolumeControl.Log.BindableEventTypeOptions)  -->
            <Collections:BindableEventType x:Key="EventTypeOptions" PropertyChanged="Handle_LogFilterChanged" />
        </ResourceDictionary>
    </Window.Resources>

    <!--  ( Element Layout )  -->
    <ctrlz:TabControlEx
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        HorizontalContentAlignment="Center"
        VerticalContentAlignment="Center"
        BorderBrush="LightGray"
        BorderThickness="0,1,0,0"
        SelectionChanged="Handle_TabControlChange"
        Style="{StaticResource TabControlStyle}">
        <!--  TAB CONTROL APPEARANCE:  -->
        <TabControl.Resources>
            <Style TargetType="TabItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border
                                Name="Border"
                                Margin="1,0"
                                BorderBrush="LightGray"
                                BorderThickness="1,1,1,0">
                                <ContentPresenter
                                    x:Name="ContentSite"
                                    Margin="10,2"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    ContentSource="Header"
                                    TextBlock.Foreground="WhiteSmoke" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  SELECTED TAB APPEARANCE:  -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="#505055" />
                                    <Setter TargetName="Border" Property="Margin" Value="1,-1" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="WhiteSmoke" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontSize" Value="13" />
                                </Trigger>
                                <!--  UNSELECTED TAB APPEARANCE:  -->
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="#303030" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="LightGray" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Regular" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontSize" Value="11" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </TabControl.Resources>


        <!--  ▼ Mixer Tab ▼  -->
        <TabItem Name="MixerTab" Header="Mixer">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="3" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="3" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="3" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="3" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="3" />
                </Grid.RowDefinitions>

                <!--  - [Row-1] Target Selection  -->
                <Grid
                    x:Name="targetSelectionRow"
                    Grid.Row="1"
                    Grid.Column="1"
                    Grid.ColumnSpan="3"
                    Width="{Binding ElementName=window, Path=ActualWidth, BindsDirectlyToSource=True, Mode=OneWay}"
                    Margin="0,2"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="14" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="6" />
                    </Grid.ColumnDefinitions>

                    <TextBox
                        x:Name="targetNameTextBox"
                        Grid.Column="1"
                        ssui:AutoCompleteBehavior.AutoCompleteItemsSource="{Binding TargetAutoCompleteSource, Source={StaticResource Settings}}"
                        ssui:AutoCompleteBehavior.AutoCompleteStringComparison="OrdinalIgnoreCase"
                        DataContext="{StaticResource Settings}"
                        IsEnabled="{Binding IsChecked, ElementName=cbLockTargetSelection, Converter={StaticResource InvertConverter}}"
                        MouseDoubleClick="Handle_TargetNameBoxDoubleClick"
                        Style="{StaticResource TextBoxStyle}"
                        Text="{Binding AudioAPI.Target, UpdateSourceTrigger=LostFocus}"
                        ToolTip="This determines which audio session will receive hotkey input." />

                    <!--  ▲ TEXTBOX WATERMARK ▼  -->
                    <TextBlock
                        Grid.Column="1"
                        Margin="7,0"
                        Style="{StaticResource WatermarkTextBlockStyle}"
                        Text="Target Process ID or Name"
                        Visibility="{Binding Text.IsEmpty, Mode=OneWay, Source={x:Reference targetNameTextBox}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    <CheckBox
                        x:Name="cbLockTargetSelection"
                        Grid.Row="0"
                        Grid.Column="2"
                        Width="52"
                        Height="Auto"
                        Margin="5,0,3,0"
                        Content="Lock"
                        DataContext="{StaticResource Settings}"
                        IsChecked="{Binding AudioAPI.LockSelectedSession, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                        Style="{StaticResource CheckBoxStyle}" />
                </Grid>

                <!--  - [Row-3] Mixer Controls & Misc  -->
                <Grid
                    x:Name="mixerControlsRow"
                    Grid.Row="3"
                    Grid.Column="1"
                    Height="29"
                    Margin="3,-2,3,1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="2" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="2" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="2" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="3" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="2" />
                    </Grid.ColumnDefinitions>
                    <Button
                        x:Name="bReload"
                        Grid.Row="1"
                        Grid.Column="1"
                        Click="Handle_ReloadClick"
                        Content="  Reload  "
                        Style="{StaticResource ButtonStyle}"
                        ToolTip="Manually reloads the list of audio sessions." />
                    <CheckBox
                        x:Name="cbReloadOnHotkey"
                        Grid.Row="1"
                        Grid.Column="2"
                        Margin="3,0,3,0"
                        VerticalAlignment="Center"
                        ClickMode="Press"
                        Content="On Hotkey"
                        DataContext="{StaticResource Settings}"
                        IsChecked="{Binding AudioAPI.ReloadOnHotkey, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource CheckBoxStyle}"
                        ToolTip="Reloads the mixer sessions when the 'Next Target'/'Previous Target' hotkeys are pressed." />
                    <Grid
                        Grid.Row="1"
                        Grid.Column="4"
                        HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="5" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <CheckBox
                            x:Name="cbReloadOnInterval"
                            ClickMode="Press"
                            Content="Automatic"
                            DataContext="{StaticResource Settings}"
                            IsChecked="{Binding AudioAPI.ReloadOnInterval, UpdateSourceTrigger=PropertyChanged}"
                            Style="{StaticResource CheckBoxStyle}"
                            ToolTip="Automatically reloads the mixer sessions on an interval." />
                        <Controls:NumericUpDown
                            Grid.Column="2"
                            HorizontalAlignment="Left"
                            DataContext="{StaticResource Settings}"
                            IsEnabled="{Binding IsChecked, ElementName=cbReloadOnInterval, UpdateSourceTrigger=PropertyChanged, FallbackValue=3000}"
                            MaxValue="{Binding AudioAPI.ReloadIntervalMax}"
                            MinValue="{Binding AudioAPI.ReloadIntervalMin}"
                            ToolTip="Reload interval in milliseconds."
                            Value="{Binding AudioAPI.ReloadInterval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>

                    <Grid
                        Grid.Row="1"
                        Grid.Column="5"
                        HorizontalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Label
                            HorizontalAlignment="Center"
                            Content="Volume Step"
                            Style="{StaticResource LabelStyle}" />
                        <Controls:NumericUpDown
                            Grid.Column="1"
                            HorizontalAlignment="Center"
                            DataContext="{StaticResource Settings}"
                            MaxValue="100"
                            MinValue="0"
                            ToolTip="This is the number of volume 'ticks' that change each time you press the volume up or down hotkeys."
                            Value="{Binding AudioAPI.VolumeStepSize, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                </Grid>

                <!--  - [Row-5] Mixer Data Grid  -->
                <Border
                    Grid.Row="5"
                    Grid.Column="1"
                    Style="{StaticResource BorderStyle}" />
                <DataGrid
                    x:Name="MixerGrid"
                    Grid.Row="5"
                    Grid.Column="1"
                    Margin="1"
                    AutoGenerateColumns="False"
                    DataContext="{StaticResource Settings}"
                    ItemsSource="{Binding AudioAPI.Sessions}"
                    Style="{StaticResource DataGridStyle}">
                    <DataGrid.Columns>
                        <!--  PID  -->
                        <DataGridTemplateColumn
                            Width="Auto"
                            Header="PID"
                            IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock
                                        Margin="3,0"
                                        VerticalAlignment="Center"
                                        Style="{StaticResource TextBlockStyle}"
                                        Text="{Binding PID, Mode=OneWay}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Process Name  -->
                        <DataGridTemplateColumn
                            Width="*"
                            Header="Process Name"
                            IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Image
                                            HorizontalAlignment="Left"
                                            Source="{Binding Icon, Mode=OneTime}"
                                            Style="{StaticResource IconImageStyle}"
                                            Visibility="{Binding ShowIcons, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <TextBlock
                                            Grid.Column="1"
                                            VerticalAlignment="Center"
                                            Style="{StaticResource TextBlockStyle}"
                                            Text="{Binding ProcessName, Mode=OneWay}" />
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Mute  -->
                        <DataGridTemplateColumn Width="40" Header="Mute">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Muted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Volume  -->
                        <DataGridTemplateColumn Width="*" Header="Volume">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid Margin="1" VerticalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <!--  Slider  -->
                                            <ColumnDefinition Width="*" />
                                            <!--  Divider  -->
                                            <ColumnDefinition Width="2" />
                                            <!--  TextBox  -->
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <!--  Slider  -->
                                        <Slider
                                            x:Name="dgVolumeSlider"
                                            Grid.Column="0"
                                            LargeChange="5"
                                            Maximum="100"
                                            Minimum="0"
                                            SmallChange="1"
                                            Style="{StaticResource MixerVolumeSliderStyle}"
                                            Value="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                        <!--  TextBox  -->
                                        <TextBox
                                            x:Name="dgVolumeTextBox"
                                            Grid.Column="2"
                                            Width="30"
                                            Background="#00000000"
                                            BorderThickness="0"
                                            Style="{StaticResource TextBoxStyle}"
                                            Text="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Select  -->
                        <DataGridTemplateColumn
                            Width="60"
                            Header=""
                            IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button
                                        Click="Handle_ProcessSelectClick"
                                        Content="Select"
                                        Style="{StaticResource ButtonStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

            </Grid>
        </TabItem>
        <!--  ▲ Mixer Tab ▲  -->


        <!--  ▼ Hotkeys Tab ▼  -->
        <TabItem Name="HotkeysTab" Header="Hotkeys">
            <TabItem.Resources>
                <helpers:CheckBoxColumnHeaderConverter x:Key="RegisteredColumnAllConverter" />
            </TabItem.Resources>
            <!--  HotkeyGrid  -->
            <Grid Margin="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="2" Style="{StaticResource BorderStyle}" />
                <DataGrid
                    x:Name="HotkeyGrid"
                    Padding="1"
                    AutoGenerateColumns="False"
                    CanUserReorderColumns="False"
                    CanUserSortColumns="False"
                    DataContext="{StaticResource Settings}"
                    ItemsSource="{Binding HotkeyAPI.Hotkeys, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                    Style="{StaticResource DataGridStyle}">
                    <DataGrid.Columns>
                        <!--  Active  -->
                        <DataGridTemplateColumn Width="Auto" CanUserResize="False">
                            <DataGridTemplateColumn.Header>
                                <CheckBox
                                    Click="Handle_ThreeStateCheckboxClick"
                                    IsChecked="{Binding HotkeyAPI.AllSelected, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                                    IsThreeState="True"
                                    Style="{StaticResource CheckBoxStyle}" />
                            </DataGridTemplateColumn.Header>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox
                                        IsChecked="{Binding Registered, UpdateSourceTrigger=PropertyChanged}"
                                        IsEnabled="{Binding Valid}"
                                        Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Name  -->
                        <DataGridTemplateColumn
                            Width="Auto"
                            MinWidth="130"
                            Header="Name"
                            IsReadOnly="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource InvertConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox
                                        VerticalAlignment="Center"
                                        Background="#00000000"
                                        BorderThickness="0"
                                        IsReadOnly="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource InvertConverter}}"
                                        Style="{StaticResource TextBoxStyle}"
                                        Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Key  -->
                        <DataGridTemplateColumn Width="6*" Header="Key">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox
                                        ItemsSource="{StaticResource KeyOptions}"
                                        SelectedValue="{Binding Key, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource ComboBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Alt  -->
                        <DataGridTemplateColumn Width="30" Header="Alt">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Alt, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Ctrl  -->
                        <DataGridTemplateColumn Width="30" Header="Ctrl">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Ctrl, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Shift  -->
                        <DataGridTemplateColumn Width="30" Header="Shift">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Shift, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Windows  -->
                        <DataGridTemplateColumn Width="30" Header="Win">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Win, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Action  -->
                        <DataGridTemplateColumn
                            Width="6*"
                            Header="Action"
                            Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox
                                        ItemsSource="{Binding ActionNames, Source={StaticResource Settings}}"
                                        SelectedValue="{Binding Action, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource ComboBoxStyle}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!--  Remove  -->
                        <DataGridTemplateColumn Width="Auto" Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button
                                        Width="20"
                                        Height="Auto"
                                        Background="#00000000"
                                        BorderThickness="0"
                                        Click="Handle_HotkeyGridRemoveClick"
                                        CommandParameter="{Binding ID}"
                                        Content="❌"
                                        FocusVisualStyle="{x:Null}"
                                        Foreground="#FF4456" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <Button
                    Grid.Row="1"
                    Click="Handle_CreateNewHotkeyClick"
                    Content="Create New Hotkey"
                    Style="{StaticResource ButtonStyle}"
                    Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Grid>
        </TabItem>
        <!--  ▲ Hotkeys Tab ▲  -->


        <!--  ▼ Settings Tab ▼  -->
        <TabItem Name="SettingsTab" Header="Settings">
            <TabItem.Resources>
                <Style
                    x:Key="HeaderLabelStyle"
                    BasedOn="{StaticResource LabelStyle}"
                    TargetType="{x:Type Label}">
                    <Setter Property="FontSize" Value="12" />
                    <Setter Property="FontWeight" Value="DemiBold" />
                    <Setter Property="Foreground" Value="WhiteSmoke" />
                    <Setter Property="Canvas.Left" Value="-3" />
                    <Setter Property="Canvas.Top" Value="-3" />
                </Style>
                <Style
                    x:Key="DividerStyle"
                    BasedOn="{StaticResource BorderStyle}"
                    TargetType="{x:Type Border}">
                    <Setter Property="Grid.ColumnSpan" Value="3" />
                    <Setter Property="BorderBrush" Value="#808080" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Margin" Value="0" />
                </Style>
                <Style x:Key="SettingsTabBodySpacing" TargetType="{x:Type Grid}">
                    <Setter Property="Margin" Value="5,14,0,3" />
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
                <Style
                    x:Key="ApplicationSettingsCheckboxStyle"
                    BasedOn="{StaticResource CheckBoxStyle}"
                    TargetType="{x:Type CheckBox}">
                    <Setter Property="HorizontalAlignment" Value="Left" />
                    <Setter Property="Margin" Value="10,2" />
                </Style>
                <Style
                    x:Key="ApplicationSettingsButtonStyle"
                    BasedOn="{StaticResource ButtonStyle}"
                    TargetType="{x:Type Button}">
                    <Setter Property="Margin" Value="10,0,30,0" />
                </Style>
            </TabItem.Resources>
            <VirtualizingStackPanel FlowDirection="LeftToRight" Orientation="Vertical">

                <!--  ▼ Version Label ▼  -->
                <Canvas
                    Grid.Column="2"
                    Width="{Binding Width, ElementName=versionLabel}"
                    Height="{Binding Height, ElementName=versionLabel}">
                    <Label
                        x:Name="versionLabel"
                        Canvas.Top="-20"
                        Canvas.Right="-2"
                        Height="Auto"
                        Margin="0,-4,0,0"
                        HorizontalAlignment="Right"
                        VerticalContentAlignment="Center"
                        Content="{Binding VersionNumber, Source={StaticResource Settings}}"
                        FontFamily="Verdana"
                        FontSize="10"
                        FontWeight="Black"
                        Foreground="LightGray"
                        Style="{StaticResource LabelStyle}"
                        Visibility="Visible" />
                </Canvas>
                <!--  ▲ Version Label ▲  -->

                <!--  ▼ Device Selection ▼  -->
                <Canvas Grid.Column="1">
                    <Label Content="Device" Style="{StaticResource HeaderLabelStyle}" />
                </Canvas>
                <Grid
                    Grid.Column="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    Style="{StaticResource SettingsTabBodySpacing}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <CheckBox
                        x:Name="cbAllDevices"
                        Margin="0,3,5,3"
                        Content="All"
                        DataContext="{StaticResource Settings}"
                        IsChecked="{Binding AudioAPI.CheckAllDevices, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, BindsDirectlyToSource=True}"
                        Style="{StaticResource CheckBoxStyle}"
                        ToolTip="When this is checked, the device dropdown is ignored and all devices are used instead." />
                    <ComboBox
                        x:Name="DeviceSelectorBox"
                        Grid.Column="1"
                        Margin="0,5"
                        DataContext="{StaticResource Settings}"
                        IsEnabled="{Binding IsChecked, ElementName=cbAllDevices, Converter={StaticResource InvertConverter}}"
                        ItemsSource="{Binding AudioAPI.Devices, BindsDirectlyToSource=True}"
                        SelectedItem="{Binding AudioAPI.SelectedDevice, UpdateSourceTrigger=LostFocus}"
                        Style="{StaticResource ComboBoxStyle}"
                        ToolTip="Selects the target audio device. If this is set, only sessions playing on the selected device are shown in the mixer.">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="20" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Style="{StaticResource TextBlockStyle}" Text="{Binding Name, Mode=OneWay}" />
                                    <Image
                                        Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Source="{Binding Icon, Mode=OneWay}"
                                        Style="{StaticResource IconImageStyle}"
                                        Visibility="{Binding ShowIcons, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                </Grid>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <Button
                        Grid.Column="2"
                        Width="15"
                        Margin="2,3"
                        Background="#00000000"
                        BorderThickness="0"
                        Click="Handle_ReloadDevicesClick"
                        Content="🗘"
                        FontFamily="Lucida Sans Unicode"
                        Foreground="WhiteSmoke"
                        Style="{StaticResource ButtonStyle}"
                        ToolTip="Reload the device list." />
                </Grid>
                <!--  ▲ Device Selection ▲  -->

                <Border Grid.Row="1" Style="{StaticResource DividerStyle}" />

                <!--  ▼ Notifications ▼  -->
                <Canvas Grid.Row="2" Grid.Column="1">
                    <Label Content="Notifications" Style="{StaticResource HeaderLabelStyle}" />
                </Canvas>
                <Grid
                    Grid.Row="2"
                    Grid.Column="1"
                    Style="{StaticResource SettingsTabBodySpacing}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="6" />
                        <ColumnDefinition Width="Auto" />
                        <!--<ColumnDefinition Width="*"/>-->
                        <ColumnDefinition Width="3" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!--  Enable Notifications Checkbox Control  -->
                    <CheckBox
                        x:Name="cbEnableNotifications"
                        Content="Enable"
                        IsChecked="{Binding NotificationEnabled, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource CheckBoxStyle}"
                        ToolTip="The notification appears when switching target sessions using hotkeys." />
                    <CheckBox
                        Grid.Column="2"
                        Content="On Volume Change"
                        IsChecked="{Binding NotificationShowsVolumeChange, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        IsEnabled="{Binding IsChecked, ElementName=cbEnableNotifications}"
                        Style="{StaticResource CheckBoxStyle}"
                        ToolTip="When this is checked, notifications appear when the volume level is changed using hotkeys." />
                    <ComboBox
                        Grid.Column="4"
                        IsEnabled="{Binding IsChecked, ElementName=cbEnableNotifications}"
                        ItemsSource="{Binding NotificationModes, Source={StaticResource Settings}}"
                        SelectedItem="{Binding NotificationMode, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ComboBoxCustomStyle}"
                        Visibility="Collapsed" />
                    <Grid
                        Grid.Column="5"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        IsEnabled="{Binding IsChecked, ElementName=cbEnableNotifications}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Label Content="Timeout" Style="{StaticResource LabelStyle}" />
                        <Controls:NumericUpDown
                            Grid.Column="1"
                            Width="88"
                            MinValue="100"
                            ToolTip="The time in milliseconds before the notification disappears after being displayed."
                            Value="{Binding NotificationTimeout, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                </Grid>
                <!--  ▲ Notifications ▲  -->

                <Border Grid.Row="3" Style="{StaticResource DividerStyle}" />

                <!--  ▼ Log Settings ▼  -->
                <Canvas Grid.Row="4" Grid.Column="1">
                    <Label Content="Logging" Style="{StaticResource HeaderLabelStyle}" />
                </Canvas>
                <Grid
                    Grid.Row="4"
                    Grid.Column="1"
                    Style="{StaticResource SettingsTabBodySpacing}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!--  Enable Log  -->
                    <CheckBox
                        x:Name="cbEnableLog"
                        VerticalAlignment="Center"
                        d:IsEnabled="True"
                        Content="Enable"
                        IsChecked="{Binding LogEnabled, ElementName=window, UpdateSourceTrigger=PropertyChanged}"
                        IsEnabled="{Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource InvertConverter}}"
                        Style="{StaticResource CheckBoxStyle}" />
                    <!--  Log Filter Level Setter  -->
                    <Grid
                        Grid.Column="1"
                        Margin="3,0"
                        IsEnabled="{Binding IsChecked, ElementName=cbEnableLog}">
                        <TextBlock
                            Margin="5,0,24,0"
                            Panel.ZIndex="1"
                            Style="{StaticResource TextBlockStyle}"
                            Text="Filter" />
                        <ComboBox
                            Panel.ZIndex="0"
                            IsEditable="False"
                            IsEnabled="{b:MultiBinding {Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource InvertConverter}},
                                                       {Binding IsChecked, ElementName=cbEnableLog},
                                                       Converter={StaticResource MultiBindingBooleanConverter}}"
                            ItemsSource="{StaticResource EventTypeOptions}"
                            Style="{StaticResource ComboBoxStyle}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <CheckBox
                                        Content="{Binding Name}"
                                        IsChecked="{Binding IsSet, UpdateSourceTrigger=PropertyChanged}"
                                        Style="{StaticResource CheckBoxStyle}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                    <!--  Log Path Textbox  -->
                    <Grid Grid.Column="2" IsEnabled="{Binding IsChecked, ElementName=cbEnableLog}">
                        <Grid.Resources>
                            <Style
                                x:Key="TextBoxValidIndicatorStyle"
                                BasedOn="{StaticResource TextBoxStyle}"
                                TargetType="TextBox">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Text.IsEmpty, Mode=OneWay, Source={x:Reference logPath}}" Value="True">
                                        <Setter Property="Background" Value="#3F3030" />
                                        <Setter Property="ToolTip" Value="Logging is disabled because this is blank." />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <TextBox
                            x:Name="logPath"
                            Style="{StaticResource TextBoxValidIndicatorStyle}"
                            Text="{Binding LogFilePath, ElementName=window, UpdateSourceTrigger=LostFocus}"
                            ToolTip="Specifies the location and name of the log file. Relative paths are relative to the location of the executable." />
                        <TextBlock
                            Grid.Column="1"
                            Width="{Binding Width, ElementName=logPath}"
                            Height="{Binding Height, ElementName=logPath}"
                            Margin="5,0"
                            d:Visibility="Collapsed"
                            Style="{StaticResource WatermarkTextBlockStyle}"
                            Text="Path to Log File"
                            Visibility="{Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    </Grid>
                    <!--  LogPath Browse Button  -->
                    <Button
                        Grid.Column="3"
                        Click="Handle_BrowseForLogFilePathClick"
                        Content=" Browse "
                        IsEnabled="{Binding IsChecked, ElementName=cbEnableLog}"
                        Style="{StaticResource ButtonStyle}" />
                </Grid>
                <!--  ▲ Log Settings ▲  -->

                <Border Grid.Row="5" Style="{StaticResource DividerStyle}" />

                <!--  ▼ Application Settings ▼  -->
                <Canvas Grid.Row="6" Grid.Column="1">
                    <Label Content="Application" Style="{StaticResource HeaderLabelStyle}" />
                </Canvas>
                <Grid
                    Grid.Row="6"
                    Grid.Column="1"
                    Style="{StaticResource SettingsTabBodySpacing}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="3" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="3" />
                    </Grid.RowDefinitions>
                    <!--  [ COLUMN 0 ]  -->
                    <!--  Check for Updates:  -->
                    <CheckBox
                        Grid.Row="1"
                        Grid.Column="0"
                        Content="Check for Updates"
                        IsChecked="{Binding CheckForUpdates, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}"
                        ToolTip="When enabled, the program will check for new versions when it starts up. ( Sends up to 2 GET requests to Github's API. )" />
                    <CheckBox
                        Grid.Row="2"
                        Grid.Column="0"
                        Content="Show Icons"
                        IsChecked="{Binding ShowIcons, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}"
                        ToolTip="When enabled, the program will attempt to display the icon associated with audio devices and sessions. ( Some icons may be missing when running as user. )" />
                    <CheckBox
                        Grid.Row="3"
                        Grid.Column="0"
                        Content="Advanced Hotkeys"
                        IsChecked="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}"
                        ToolTip="When enabled, you can add/remove/rename hotkeys and change their action bindings." />
                    <Button
                        Grid.Row="4"
                        Grid.Column="0"
                        Click="Handle_ResetHotkeysClick"
                        Content="Reset Hotkeys"
                        Style="{StaticResource ApplicationSettingsButtonStyle}"
                        ToolTip="Resets all hotkeys to their default values. ( Requires confirmation! )" />

                    <!--  [ COLUMN 1 ]  -->
                    <CheckBox
                        Grid.Row="1"
                        Grid.Column="1"
                        Content="Run at Startup"
                        IsChecked="{Binding RunAtStartup, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}"
                        ToolTip="When enabled, Volume Control will start when you log in." />
                    <CheckBox
                        Grid.Row="2"
                        Grid.Column="1"
                        Content="Start Minimized"
                        IsChecked="{Binding StartMinimized, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}"
                        ToolTip="When enabled, Volume Control will minimize itself when it starts up." />
                    <CheckBox
                        Grid.Row="3"
                        Grid.Column="1"
                        Content="Show in Taskbar"
                        IsChecked="{Binding ShowInTaskbar, ElementName=window, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}" />
                    <CheckBox
                        Grid.Row="4"
                        Grid.Column="1"
                        Content="Always on Top"
                        IsChecked="{Binding Topmost, ElementName=window, UpdateSourceTrigger=PropertyChanged}"
                        Style="{StaticResource ApplicationSettingsCheckboxStyle}" />
                </Grid>
                <!--  ▲ Application Settings ▲  -->
            </VirtualizingStackPanel>
        </TabItem>
        <!--  ▲ Settings Tab ▲  -->
    </ctrlz:TabControlEx>
</Window>
