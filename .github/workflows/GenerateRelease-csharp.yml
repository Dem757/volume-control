name: Generate Release

on:
  workflow_run:
    workflows:
      - 'Update Version'
    types:
      - 'completed'

defaults:
  run:
    shell:  |
            pwsh -noninteractive -command "try {{ $ErrorActionPreference='Stop'; . '{0}' }} catch {{ Write-Error ""FAILED: $_""; throw; }} if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) {{ exit $LASTEXITCODE }}"

# Configuration Type
env:
  BUILD_TYPE: 'Release'

jobs:
  build-release: # Only run on successful version update action
    runs-on:  windows-latest
    if:       ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      DOTNET_NOLOGO:                true
      DOTNET_CLI_TELEMETRY_OPTOUT:  true

    steps:
      - uses: actions/checkout@v3
        with:
          ref:          '${{ github.ref }}'
          fetch-depth:  0

      - uses: actions/setup-dotnet@main
        with:
          dotnet-version:   6.0.x

      - name:   Change Directory
        run:    cd "${{github.workspace}}"

      - name:   Build VolumeControl Binary
        run:    dotnet publish VolumeControl -c ${{env.BUILD_TYPE}} /p:PublishProfile="VolumeControl/Properties/PublishProfiles/FolderProfile.pubxml"

      - name:   Create Staging Directory
        run:    mkdir "STAGING"

      - name:   Stage Files
        run:    foreach($file in $((dir "publish" -recurse | where {$_.extension -in ".exe"}).Fullname)){ mv "$file" "STAGING" }

      - name:   Upload Executable Artifact
        uses:   actions/upload-artifact@v3
        with:
          name: build-windows
          path: '${{github.workspace}}/STAGING/*'
          if-no-files-found: error

      - name:   Upload SDK Artifact
        uses:   actions/upload-artifact@v3
        with:
          name: sdk
          path: '${{github.workspace}}/publish/SDK/*'
          if-no-files-found: error

      - name:   Authenticate with NuGet for Github Packages
        run:    dotnet nuget add source --username radj307 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/radj307/index.json"

      - name:   Pack SDK NuGet Package
        run:    dotnet pack ./VolumeControl.SDK/VolumeControl.SDK.csproj -c Release -o .

      - name:   Upload SDK NuGet Package
        uses:   dotnet nuget push $(Get-ChildItem -Filter *.nupkg -Name) -k ${{ github.token }} -s https://nuget.pkg.github.com/radj307/index.json --skip-duplicate
        
  # Create the release using the uploaded artifact on github:
  create-release:
    needs:    build-release
    runs-on:  ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path:  ${{github.workspace}}

      - name: Stage Artifacts
        run:  |
              cd ${{github.workspace}}/sdk
              zip -T9 ../SDK.zip ./*
              cd ${{github.workspace}}

      - run:  ls -lAghR

      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        with:
          draft:                    true
          fail_on_unmatched_files:  true
          files:      |
                      ${{github.workspace}}/build-windows/VolumeControl.exe
                      ${{github.workspace}}/SDK.zip
