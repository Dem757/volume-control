<Window x:Name="window"
        x:Class="VolumeControl.Mixer"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:VolumeControl.Core.Controls;assembly=VolumeControl.WPF"
        xmlns:core="clr-namespace:VolumeControl.Core;assembly=VolumeControl.Core"
        xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
        mc:Ignorable="d"
        Title="Volume Control"
        DataContext="{RelativeSource Self}"
        UseLayoutRounding="True" ResizeMode="CanMinimize" Icon="/Properties/Resources/icons/icon-16x16-VC.ico">
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="SizeToContent" Value="Height"/>
            <Setter Property="Background" Value="#606060"/>
            <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Width" Value="440"/>
        </Style>
    </Window.Style>

    <!--( Static Resources )-->
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="VolumeControlResources.xaml"/>
            </ResourceDictionary.MergedDictionaries>


            <!-- CheckBox -->
            <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>

                <Setter Property="Background" Value="WhiteSmoke"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>
            <!-- Button -->
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Padding" Value="5,1,5,1"/>
                <Setter Property="Margin" Value="3,0,3,0"/>
                <Setter Property="Height" Value="23"/>
                <Setter Property="Foreground" Value="#050505"/>
            </Style>
            <!-- TextBox -->
            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Background" Value="#454545"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
            </Style>
            <!-- Mixer Volume TextBox -->
            <Style x:Key="MixerVolumeTextBoxStyle" BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="26"/>
            </Style>
            <!-- Mixer Column Header -->
            <Style x:Key="MixerHeadersStyle" TargetType="DataGridColumnHeader">
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="Height" Value="22"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <!-- Mixer Cell -->
            <Style x:Key="MixerCellStyle" TargetType="DataGridCell">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
            </Style>
            <!-- Mixer Row -->
            <Style x:Key="MixerRowStyle" TargetType="DataGridRow">
                <Setter Property="Background" Value="#505050"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
            </Style>
            <!-- Mixer Volume Slider -->
            <Style x:Key="MixerVolumeSliderStyle" TargetType="Slider">
                <Setter Property="Background" Value="Transparent"/>
            </Style>
            <!-- Mixer -->
            <Style x:Key="DataGridStyle" TargetType="DataGrid">
                <Setter Property="Background" Value="#303030"/>
                <Setter Property="AlternatingRowBackground" Value="#606060"/>
                <Setter Property="ColumnHeaderStyle" Value="{StaticResource MixerHeadersStyle}"/>
                <Setter Property="CellStyle" Value="{StaticResource MixerCellStyle}"/>
                <Setter Property="RowStyle" Value="{StaticResource MixerRowStyle}"/>
                <Setter Property="AlternationCount" Value="1"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="SelectionUnit" Value="Cell"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <!-- NumericUpDown -->
            <Style TargetType="Controls:NumericUpDown" x:Key="NumericUpDownStyle">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
            </Style>
            <!-- TabControl -->
            <Style x:Key="TabControlStyle" TargetType="TabControl">
                <Setter Property="Background" Value="Transparent"/>
            </Style>
            <!-- TabItem -->
            <Style x:Key="TabItemStyle" TargetType="TabItem">
                <Setter Property="Background" Value="WhiteSmoke"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Height" Value="20"/>
            </Style>
            <!-- ComboBox -->
            <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="21"/>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <!--( Element Layout )-->
    <TabControl Style="{StaticResource TabControlStyle}" SelectionChanged="TabControl_SelectionChanged">
        <!-- TAB: Mixer -->
        <TabItem Header="Mixer" Name="MixerTab" Style="{StaticResource TabItemStyle}">
            <Grid HorizontalAlignment="Center"
                  VerticalAlignment="Top"
                  UseLayoutRounding="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="3"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                </Grid.RowDefinitions>

                <!--- [Row-0] Target Selection -->
                <Grid x:Name="targetSelectionRow"
                      Grid.Column="1"
                      Grid.Row="1"
                      Height="25"
                      HorizontalAlignment="Center"
                      Width="{Binding ElementName=window, Path=ActualWidth, BindsDirectlyToSource=True, Mode=OneWay}"
                      Margin="3,3,3,0">

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="14"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="6"/>
                    </Grid.ColumnDefinitions>
                    <!--<Button Grid.Column="1"
                    Width="Auto"
                    Content="Set Target"
                    Padding="5,1,5,1"
                    Height="21"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Click="Handle_ApplyClick"
                    IsEnabled="{c:Binding ElementName=cbLockTargetSelection, Path=!IsChecked}"
                    Style="{StaticResource ButtonStyle}"/>-->
                    <TextBox x:Name="targetNameTextBox"
                     Grid.Column="1"
                     TextWrapping="NoWrap"
                     Margin="3,0,3,0"
                     VerticalContentAlignment="Center"
                     VerticalAlignment="Center"
                     HorizontalAlignment="Stretch"
                     Height="23"
                     TabIndex="0"
                     ToolTip="You can enter the Process ID or Process Name of any valid audio session here. Click the 'Set Target' button to apply the changes."
                     Text="{Binding Target, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus, BindsDirectlyToSource=True, IsAsync=True}"
                     DataContext="{StaticResource AudioAPI}"
                     IsEnabled="{c:Binding ElementName=cbLockTargetSelection, Path=!IsChecked}"
                     Style="{StaticResource TextBoxStyle}"/>
                    <CheckBox x:Name="cbLockTargetSelection"
                      Grid.Row="0"
                      Grid.Column="2"
                      Content="Lock"
                      Width="52"
                      Height="Auto"
                      TabIndex="1"
                      Margin="2,0,0,0"
                      DataContext="{StaticResource AudioAPI}"
                      IsChecked="{Binding LockSelection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      Style="{StaticResource CheckBoxStyle}"/>
                </Grid>

                <!--- [Row-1] Mixer Controls & Misc -->
                <Grid x:Name="mixerControlsRow" 
              Grid.Row="3"
              Grid.Column="1"
              Height="25"
              Margin="3,-2,3,1"
              VerticalAlignment="Center"
              HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <ComboBox x:Name="DeviceSelectorBox"
                              Grid.Column="0"
                              Grid.Row="0"
                              Width="80"
                              Style="{StaticResource ComboBoxStyle}"
                              ItemsSource="{Binding Devices, UpdateSourceTrigger=PropertyChanged, BindsDirectlyToSource=True}"
                              DisplayMemberPath="DeviceID"
                              SelectedItem="{Binding SelectedDevice}"
                              DataContext="{StaticResource AudioAPI}"
                              ToolTip="The Audio Device to bind to."/>
                    <Button x:Name="bReload"
                            Grid.Column="1"
                            Grid.Row="0"
                            Content="Refresh Sessions"
                            Height="21"
                            Width="100"
                            Click="Handle_ReloadClick"
                            TabIndex="2"
                            Style="{StaticResource ButtonStyle}"/>
                    <CheckBox x:Name="cbReloadOnHotkey"
                              Grid.Column="2"
                              Grid.Row="0"
                              VerticalAlignment="Center"
                              Content="On Hotkey"
                              Margin="3,0,3,0"
                              IsChecked="{Binding ReloadOnHotkey, BindsDirectlyToSource=True, Mode=TwoWay}"
                              TabIndex="3"
                              ClickMode="Press"
                              Canvas.Left="-5"
                              Canvas.Top="-1"
                              DataContext="{StaticResource AudioAPI}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <CheckBox x:Name="cbReloadOnInterval"
                              Grid.Column="3"
                              Grid.Row="0"
                              VerticalAlignment="Center"
                              Content="Automatic"
                              IsChecked="{Binding ReloadOnInterval, BindsDirectlyToSource=True, Mode=TwoWay}"
                              TabIndex="4"
                              ClickMode="Press"
                              DataContext="{StaticResource AudioAPI}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <Controls:NumericUpDown HorizontalAlignment="Left"
                                            Grid.Column="4"
                                            Grid.Row="0"
                                            Height="23"
                                            Width="60"
                                            Margin="3,0,3,0"
                                            ToolTip="Reload Interval in Milliseconds"
                                            TabIndex="5"
                                            MaxDecimalPlaces="0"
                                            IsEnabled="{Binding ElementName=cbReloadOnInterval, Path=IsChecked, UpdateSourceTrigger=PropertyChanged, FallbackValue=3000}"
                                            MinValue="{Binding ReloadIntervalMin}"
                                            MaxValue="{Binding ReloadIntervalMax}"
                                            Value="{Binding ReloadInterval, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            DataContext="{StaticResource AudioAPI}"/>
                </Grid>

                <!--- [Row-2] Mixer Data Grid -->
                <DataGrid x:Name="MixerGrid"
                  ItemsSource="{Binding Sessions, NotifyOnSourceUpdated=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  Grid.Column="1"
                  Grid.Row="5"
                  AutoGenerateColumns="False"
                  Style="{StaticResource DataGridStyle}"
                  DataContext="{StaticResource AudioAPI}">
                    <DataGrid.Columns>
                        <!-- PID -->
                        <DataGridTextColumn Header="PID" Binding="{Binding PID, Mode=OneTime}" IsReadOnly="True"/>
                        <!-- Process Name -->
                        <DataGridTextColumn Header="Process Name" Width="*" Binding="{Binding ProcessName, Mode=OneWay}" IsReadOnly="True"/>
                        <!-- Mute -->
                        <DataGridTemplateColumn Header="Mute" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Muted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Volume -->
                        <DataGridTemplateColumn Header="Volume" Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid VerticalAlignment="Center" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="3"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Slider x:Name="dgVolumeSlider" Grid.Column="0" Minimum="0" Maximum="100" Value="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SmallChange="1" LargeChange="5" Style="{StaticResource MixerVolumeSliderStyle}"/>
                                        <TextBox x:Name="dgVolumeTextBox" Grid.Column="2" Text="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MixerVolumeTextBoxStyle}"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Select -->
                        <DataGridTemplateColumn Header="" Width="Auto" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="Handle_ProcessSelectClick" 
                                    Content="Select"
                                    Padding="3,1,3,1"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

            </Grid>
        </TabItem>


        <!-- TAB: Hotkeys -->
        <TabItem Header="Hotkeys" Name="HotkeysTab" Style="{StaticResource TabItemStyle}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- [Row-1]: HotkeyGrid -->
                <DataGrid x:Name="HotkeyGrid"
                          Grid.Column="0"
                          Grid.Row="0"
                          Padding="1"
                          AutoGenerateColumns="False"
                          DataContext="{StaticResource HotkeyAPI}"
                          ItemsSource="{Binding Hotkeys, UpdateSourceTrigger=Explicit, NotifyOnSourceUpdated=True, NotifyOnTargetUpdated=True, Mode=TwoWay, BindsDirectlyToSource=True}"
                          Style="{StaticResource DataGridStyle}">

                    <DataGrid.Columns>
                        <!-- Active -->
                        <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding Registered, UpdateSourceTrigger=PropertyChanged}"/>
                        <!-- Name -->
                        <DataGridTextColumn Header="Name" Width="2*" Binding="{Binding Name, UpdateSourceTrigger=LostFocus}"/>
                        <!-- Key -->
                        <DataGridComboBoxColumn Header="Key" Width="*" ItemsSource="{StaticResource KeyOptions}" SelectedValueBinding="{Binding Key}"/>
                        <!-- Alt -->
                        <DataGridCheckBoxColumn Header="Alt" Binding="{Binding Alt, UpdateSourceTrigger=PropertyChanged}"/>
                        <!-- Ctrl -->
                        <DataGridCheckBoxColumn Header="Ctrl" Binding="{Binding Ctrl, UpdateSourceTrigger=PropertyChanged}"/>
                        <!-- Shift -->
                        <DataGridCheckBoxColumn Header="Shift" Binding="{Binding Shift, UpdateSourceTrigger=PropertyChanged}"/>
                        <!-- Windows -->
                        <DataGridCheckBoxColumn Header="Win" Binding="{Binding Win, UpdateSourceTrigger=PropertyChanged}"/>
                    </DataGrid.Columns>

                </DataGrid>
            </Grid>
        </TabItem>
    </TabControl>
</Window>
