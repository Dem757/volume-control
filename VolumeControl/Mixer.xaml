<Window x:Name="window"
        x:Class="VolumeControl.Mixer"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:VolumeControl.WPF;assembly=VolumeControl.WPF"
        xmlns:ctrlz="urn:controlzex"
        xmlns:tbBehaviour="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete"
        xmlns:sys="clr-namespace:System.Runtime;assembly=netstandard"
        mc:Ignorable="d"
        Title="Volume Control"
        DataContext="{RelativeSource Self}"
        Icon="/Resources/icons/icon-16x16-VC.ico"
        Closing="Window_Closing"
        Initialized="Window_Initialized"
        StateChanged="Window_StateChanged"
        Loaded="Window_Loaded">
    <Window.Background>
        <SolidColorBrush Color="#EE303030"/>
    </Window.Background>
    
    <Window.Style>
        <!-- Set Window Style Properties -->
        <Style TargetType="Window">
            <Setter Property="SizeToContent" Value="WidthAndHeight"/>
            <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Width" Value="500"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
            <Setter Property="ResizeMode" Value="CanMinimize"/>
            <Setter Property="FontSize" Value="12"/>
        </Style>
    </Window.Style>

    <!--( Static Resources )-->
    <Window.Resources>
        <ResourceDictionary>
            <!-- CheckBox -->
            <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Background" Value="WhiteSmoke"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- Button -->
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="#BBBBBB"/>
                <Setter Property="Padding" Value="5,1,5,1"/>
                <Setter Property="Margin" Value="3,0,3,0"/>
                <Setter Property="Height" Value="23"/>
                <Setter Property="Foreground" Value="#050505"/>
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- TextBox -->
            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Background" Value="#303030"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="SelectionBrush" Value="#569DE5"/>
                <Setter Property="SelectionOpacity" Value="0.5"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- Label -->
            <Style x:Key="LabelStyle" TargetType="Label">
                <Style.Triggers>
                    <!-- Change the color of label text when disabled to something visible -->
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="LightGray"/>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- Mixer Volume TextBox -->
            <Style x:Key="MixerVolumeTextBoxStyle" BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox">
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="26"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- Mixer Header Brushes -->
            <LinearGradientBrush x:Key="MixerHeaderBrush" StartPoint="0.5,0" EndPoint="0.5,1" Opacity="0.5">
                <GradientStop Color="#FFFFFF" Offset="-0.6"/>
                <GradientStop Color="#606060" Offset="0.05"/>
                <GradientStop Color="#454545" Offset="0.2"/>
                <GradientStop Color="#303030" Offset="0.5"/>
                <GradientStop Color="#454545" Offset="0.8"/>
                <GradientStop Color="#606060" Offset="0.95"/>
                <GradientStop Color="#FFFFFF" Offset="1.6"/>
            </LinearGradientBrush>
            <!-- Mixer Headers -->
            <Style x:Key="MixerHeadersStyle" TargetType="DataGridColumnHeader">
                <Style.Triggers>
                    <!--
                    <DataTrigger Binding="{Binding Content.IsEmpty, RelativeSource={RelativeSource Self}}" Value="True">
                        <Setter Property="BorderThickness" Value="0,0,0,1"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Content.IsEmpty, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="BorderThickness" Value="1,0,0,1"/>
                    </DataTrigger>
                    -->
                </Style.Triggers>
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="Height" Value="24"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="Background" Value="{StaticResource MixerHeaderBrush}"/>
                <Setter Property="BorderBrush" Value="Gainsboro"/>
                <Setter Property="BorderThickness" Value="0,0,0,1"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <Style x:Key="BorderStyle" TargetType="Border">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Gainsboro"/>
            </Style>
            <!-- Mixer Cell -->
            <Style x:Key="MixerCellStyle" TargetType="DataGridCell">
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>
            <!-- Mixer Volume Slider -->
            <Style x:Key="MixerVolumeSliderStyle" TargetType="Slider">
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="Minimum" Value="0"/>
                <Setter Property="Maximum" Value="100"/>
            </Style>
            <!-- DataGrid -->
            <Style x:Key="DataGridStyle" TargetType="DataGrid">
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="RowBackground" Value="#303030"/>
                <Setter Property="AlternatingRowBackground" Value="#454545"/>
                <Setter Property="ColumnHeaderStyle" Value="{StaticResource MixerHeadersStyle}"/>
                <Setter Property="CellStyle" Value="{StaticResource MixerCellStyle}"/>
                <Setter Property="HorizontalGridLinesBrush" Value="LightGray"/>
                <Setter Property="AlternationCount" Value="1"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="SelectionUnit" Value="Cell"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="GridLinesVisibility" Value="Horizontal"/>
            </Style>
            <!-- NumericUpDown -->
            <Style x:Key="NumericUpDownStyle" TargetType="Controls:NumericUpDown">
                <Setter Property="Background" Value="#00000000"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
                <Setter Property="Height" Value="23"/>
                <Setter Property="Margin" Value="3,0,3,0"/>
            </Style>
            <!-- TabControl -->
            <Style x:Key="TabControlStyle" TargetType="ctrlz:TabControlEx">
                <Setter Property="Background" Value="#505055"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
            </Style>


            <ResourceDictionary x:Key="ComboBoxResources">
                <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFF" Offset="0.0"/>
                            <GradientStop Color="#CCC" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFF" Offset="0.0"/>
                            <GradientStop Color="#CCC" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFF" Offset="0.0"/>
                            <GradientStop Color="#EEE" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFF" Offset="0.0"/>
                            <GradientStop Color="#EEE" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#FFF" Offset="0.0"/>
                            <GradientStop Color="#AAA" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#BBB" Offset="0.0"/>
                            <GradientStop Color="#EEE" Offset="0.1"/>
                            <GradientStop Color="#EEE" Offset="0.9"/>
                            <GradientStop Color="#FFF" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

                <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

                <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

                <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

                <!-- Border Brushes -->

                <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#CCC" Offset="0.0"/>
                            <GradientStop Color="#444" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#CCC" Offset="0.0"/>
                            <GradientStop Color="#444" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#777" Offset="0.0"/>
                            <GradientStop Color="#000" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Color="#444" Offset="0.0"/>
                            <GradientStop Color="#888" Offset="1.0"/>
                        </GradientStopCollection>
                    </GradientBrush.GradientStops>
                </LinearGradientBrush>

                <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

                <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

                <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

                <!-- Miscellaneous Brushes -->
                <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

                <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
            </ResourceDictionary>

            <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton" Resources="{StaticResource ComboBoxResources}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="20" />
                    </Grid.ColumnDefinitions>
                    <Border x:Name="Border" 
                            Grid.ColumnSpan="2"
                            CornerRadius="0"
                            Background="{StaticResource NormalBrush}"
                            BorderBrush="{StaticResource NormalBorderBrush}"
                            BorderThickness="2,1,1,1" />
                    <Border Grid.Column="0"
                            Margin="0"
                            Background="{StaticResource WindowBackgroundBrush}" 
                            BorderBrush="{StaticResource NormalBorderBrush}"
                            BorderThickness="0,0,1,0" />
                    <Path x:Name="Arrow"
                          Grid.Column="1"     
                          Fill="{StaticResource GlyphBrush}"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="M 0 0 L 4 4 L 8 0 Z"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                    </Trigger>
                    <Trigger Property="ToggleButton.IsChecked" Value="true">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                        <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource DisabledForegroundBrush}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ComboBoxTextBox" TargetType="TextBox">
                <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            </ControlTemplate>

            <Style x:Key="ComboBoxCustomStyle" TargetType="ComboBox" Resources="{StaticResource ComboBoxResources}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Grid>
                                <ToggleButton Name="ToggleButton" 
                                              Template="{StaticResource ComboBoxToggleButton}" 
                                              Grid.Column="2" 
                                              Focusable="false"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                              ClickMode="Press">
                                </ToggleButton>
                                <ContentPresenter Name="ContentSite"
                                                  IsHitTestVisible="False" 
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Margin="3,3,23,3"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Left" />
                                <TextBox x:Name="PART_EditableTextBox"
                                         Style="{x:Null}" 
                                         Template="{StaticResource ComboBoxTextBox}" 
                                         HorizontalAlignment="Left" 
                                         VerticalAlignment="Center" 
                                         Margin="3,3,23,3"
                                         Focusable="True" 
                                         Background="Transparent"
                                         Visibility="Hidden"
                                         IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                <Popup Name="Popup"
                                       Placement="Bottom"
                                       IsOpen="{TemplateBinding IsDropDownOpen}"
                                       AllowsTransparency="True" 
                                       Focusable="False"
                                       PopupAnimation="Slide">
                                    <Grid Name="DropDown"
                                          SnapsToDevicePixels="True"                
                                          MinWidth="{TemplateBinding ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border x:Name="DropDownBorder"
                                                Background="{StaticResource WindowBackgroundBrush}"
                                                BorderThickness="1"
                                                BorderBrush="{StaticResource SolidBorderBrush}"/>
                                        <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEditable" Value="true">
                                    <Setter Property="IsTabStop" Value="false"/>
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>
                                    <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                </Style.Triggers>
            </Style>


            <!-- ComboBox -->
            <Style x:Key="ComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource ComboBoxCustomStyle}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="#9A9A9A"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True">
                        <Setter Property="Foreground" Value="Black"/>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
                <Setter Property="AlternationCount" Value="1"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="IsTextSearchCaseSensitive" Value="False"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="21"/>
            </Style>
            <!-- TextBlock -->
            <Style x:Key="TextBlockStyle" TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
            <!-- Watermark TextBlock -->
            <Style x:Key="WatermarkTextBlockStyle" BasedOn="{StaticResource TextBlockStyle}" TargetType="TextBlock">
                <Setter Property="FontFamily" Value="{StaticResource InterFont}"/>
                <Setter Property="Foreground" Value="#9A9A9A"/>
                <Setter Property="IsHitTestVisible" Value="False"/>
            </Style>

            <!-- EventTypeOptions (VolumeControl.Log.BindableEventTypeOptions) -->
            <Controls:BindableEventType x:Key="EventTypeOptions" PropertyChanged="Handle_LogFilterChanged"/>
        </ResourceDictionary>
    </Window.Resources>

    <!--( Element Layout )-->
    <ctrlz:TabControlEx Style="{StaticResource TabControlStyle}"
                        SelectionChanged="Handle_TabControlChange"
                        BorderThickness="1"
                        BorderBrush="LightGray"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center">
        <!-- TAB CONTROL APPEARANCE: -->
        <TabControl.Resources>
            <Style TargetType="TabItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="LightGray" Margin="1,0">
                                <ContentPresenter x:Name="ContentSite"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  ContentSource="Header"
                                                  TextBlock.Foreground="WhiteSmoke"
                                                  TextBlock.FontFamily="{StaticResource InterFont}"
                                                  Margin="10,2"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <!-- SELECTED TAB APPEARANCE: -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="#505055" />
                                    <Setter TargetName="Border" Property="Margin" Value="1,-1" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="WhiteSmoke"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Bold"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontSize" Value="13"/>
                                </Trigger>
                                <!-- UNSELECTED TAB APPEARANCE: -->
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="#303030"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="LightGray"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Regular"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontSize" Value="11"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </TabControl.Resources>


        <!--▼ Mixer Tab ▼-->
        <TabItem Header="Mixer" Name="MixerTab">
            <Grid HorizontalAlignment="Center"
                  VerticalAlignment="Top"
                  UseLayoutRounding="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="3"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                </Grid.RowDefinitions>

                <!--- [Row-1] Target Selection -->
                <Grid x:Name="targetSelectionRow"
                      Grid.Column="1"
                      Grid.ColumnSpan="3"
                      Grid.Row="1"
                      Height="25"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Width="{Binding ElementName=window, Path=ActualWidth, BindsDirectlyToSource=True, Mode=OneWay}"
                      Margin="0,2">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="14"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="6"/>
                    </Grid.ColumnDefinitions>

                    <TextBox x:Name="targetNameTextBox"
                             Grid.Column="1"
                             Margin="3,0,3,0"
                             Height="23"
                             ToolTip="This determines which audio session will receive hotkey input."
                             tbBehaviour:AutoCompleteBehavior.AutoCompleteItemsSource="{Binding AudioAPI.TargetAutoCompleteSource, Source={StaticResource Settings}}"
                             tbBehaviour:AutoCompleteBehavior.AutoCompleteIndicator=""
                             tbBehaviour:AutoCompleteBehavior.AutoCompleteStringComparison="OrdinalIgnoreCase"
                             Text="{Binding AudioAPI.Target, UpdateSourceTrigger=LostFocus}"
                             DataContext="{StaticResource Settings}"
                             IsEnabled="{Binding IsChecked, ElementName=cbLockTargetSelection, Converter={StaticResource InvertConverter}}"
                             Style="{StaticResource TextBoxStyle}"/>

                    <!--▲ TEXTBOX WATERMARK ▼-->
                    <TextBlock Grid.Column="1"
                               Margin="7,0"
                               Text="Target Process ID or Name"
                               Style="{StaticResource WatermarkTextBlockStyle}"
                               Visibility="{Binding Text.IsEmpty, Mode=OneWay, Source={x:Reference targetNameTextBox}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <CheckBox x:Name="cbLockTargetSelection"
                              Grid.Row="0"
                              Grid.Column="2"
                              Content="Lock"
                              Width="52"
                              Height="Auto"
                              Margin="2,0,9,0"
                              DataContext="{StaticResource Settings}"
                              IsChecked="{Binding AudioAPI.LockSelectedSession, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                              Style="{StaticResource CheckBoxStyle}"/>
                </Grid>

                <!--- [Row-3] Mixer Controls & Misc -->
                <Grid x:Name="mixerControlsRow" 
                      Grid.Row="2"
                      Grid.Column="1"
                      Height="29"
                      Margin="3,-2,3,1"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="2"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="2"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="2"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="2"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="bReload"
                            Grid.Column="1"
                            Grid.Row="1"
                            Content="Reload"
                            ToolTip="Manually reloads the list of audio sessions."
                            Click="Handle_ReloadClick"
                            Style="{StaticResource ButtonStyle}"/>
                    <CheckBox x:Name="cbReloadOnHotkey"
                              Grid.Column="2"
                              Grid.Row="1"
                              VerticalAlignment="Center"
                              Content="On Hotkey"
                              ToolTip="Reloads the mixer sessions when the 'Next Target'/'Previous Target' hotkeys are pressed."
                              Margin="3,0,3,0"
                              IsChecked="{Binding AudioAPI.ReloadOnHotkey, UpdateSourceTrigger=PropertyChanged}"
                              ClickMode="Press"
                              DataContext="{StaticResource Settings}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <Grid Grid.Column="4"
                          Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <CheckBox x:Name="cbReloadOnInterval"
                              Content="Automatic"
                              ToolTip="Automatically reloads the mixer sessions on an interval."
                              IsChecked="{Binding AudioAPI.ReloadOnInterval, UpdateSourceTrigger=PropertyChanged}"
                              ClickMode="Press"
                              DataContext="{StaticResource Settings}"
                              Style="{StaticResource CheckBoxStyle}"/>
                        <Controls:NumericUpDown HorizontalAlignment="Left"
                                            Grid.Column="1"
                                            Width="60"
                                            ToolTip="Reload Interval in Milliseconds"
                                            MaxDecimalPlaces="0"
                                            IsEnabled="{Binding IsChecked, ElementName=cbReloadOnInterval, UpdateSourceTrigger=PropertyChanged, FallbackValue=3000}"
                                            MinValue="{Binding AudioAPI.ReloadIntervalMin}"
                                            MaxValue="{Binding AudioAPI.ReloadIntervalMax}"
                                            Value="{Binding AudioAPI.ReloadInterval, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                            DataContext="{StaticResource Settings}"
                                            Style="{StaticResource NumericUpDownStyle}"/>
                    </Grid>

                    <Grid Grid.Column="5" Grid.Row="1"  HorizontalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Label Content="Volume Step"
                               HorizontalAlignment="Center"
                               Style="{StaticResource LabelStyle}"/>
                        <Controls:NumericUpDown x:Name="VolumeStep"
                                                Grid.Column="1"
                                                HorizontalAlignment="Center"
                                                ToolTip="This is the number of volume 'ticks' that change each time you press the volume up or down hotkeys."
                                                Width="48"
                                                DecimalPlaces="0"
                                                MinValue="0"
                                                MaxValue="100"
                                                Value="{Binding AudioAPI.VolumeStepSize, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"
                                                Style="{StaticResource NumericUpDownStyle}"/>
                    </Grid>
                </Grid>

                <!--- [Row-5] Mixer Data Grid -->
                <Border Grid.Column="1"
                        Grid.Row="4"
                        Style="{StaticResource BorderStyle}"/>
                <DataGrid x:Name="MixerGrid"
                          ItemsSource="{Binding AudioAPI.Sessions}"
                          Grid.Column="1"
                          Grid.Row="4"
                          Margin="1"
                          AutoGenerateColumns="False"
                          Style="{StaticResource DataGridStyle}"
                          DataContext="{StaticResource Settings}">
                    <DataGrid.Columns>
                        <!-- PID -->
                        <DataGridTemplateColumn Header="PID" Width="Auto" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="3,0" Text="{Binding PID, Mode=OneWay}" VerticalAlignment="Center" Style="{StaticResource TextBlockStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Process Name -->
                        <DataGridTemplateColumn Header="Process Name" Width="*" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="20"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Image HorizontalAlignment="Left" Source="{Binding Icon, Mode=OneTime}" Style="{StaticResource IconImageStyle}"
                                               Visibility="{Binding ShowIcons, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                        <TextBlock Grid.Column="1" Text="{Binding ProcessName, Mode=OneWay}" VerticalAlignment="Center" Style="{StaticResource TextBlockStyle}"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Mute -->
                        <DataGridTemplateColumn Header="Mute" Width="40">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Muted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Volume -->
                        <DataGridTemplateColumn Header="Volume" Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid VerticalAlignment="Center" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <!-- Slider -->
                                            <ColumnDefinition Width="2"/>
                                            <!-- Divider -->
                                            <ColumnDefinition Width="Auto"/>
                                            <!-- TextBox -->
                                        </Grid.ColumnDefinitions>
                                        <!-- Slider -->
                                        <Slider x:Name="dgVolumeSlider" Grid.Column="0" Minimum="0" Maximum="100" Value="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SmallChange="1" LargeChange="5" Style="{StaticResource MixerVolumeSliderStyle}"/>
                                        <!-- TextBox -->
                                        <TextBox x:Name="dgVolumeTextBox" Grid.Column="2" Text="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MixerVolumeTextBoxStyle}"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Select -->
                        <DataGridTemplateColumn Header="" Width="60" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="Handle_ProcessSelectClick" 
                                            Content="Select"
                                            Style="{StaticResource ButtonStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

            </Grid>
        </TabItem>
        <!--▲ Mixer Tab ▲-->


        <!--▼ Hotkeys Tab ▼-->
        <TabItem Header="Hotkeys" Name="HotkeysTab">
            <!-- HotkeyGrid -->
            <Grid Margin="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Border Style="{StaticResource BorderStyle}"
                        Grid.RowSpan="2"/>
                <DataGrid x:Name="HotkeyGrid"
                          CanUserSortColumns="False"
                          CanUserReorderColumns="False"
                          Padding="1"
                          AutoGenerateColumns="False"
                          DataContext="{StaticResource Settings}"
                          ItemsSource="{Binding HotkeyAPI.Hotkeys, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                          Style="{StaticResource DataGridStyle}">

                    <DataGrid.Columns>
                        <!-- Active -->
                        <DataGridTemplateColumn Header="" Width="Auto" CanUserResize="False">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsEnabled="{Binding Valid}" IsChecked="{Binding Registered, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Name -->
                        <DataGridTemplateColumn Header="Name" Width="Auto" MinWidth="130" IsReadOnly="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource InvertConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBox IsReadOnly="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource InvertConverter}}" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" VerticalAlignment="Center" Background="#00000000" Style="{StaticResource TextBoxStyle}" BorderThickness="0"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Key -->
                        <DataGridTemplateColumn Header="Key" Width="6*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{StaticResource KeyOptions}" SelectedValue="{Binding Key, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ComboBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Alt -->
                        <DataGridTemplateColumn Header="Alt" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Alt, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Ctrl -->
                        <DataGridTemplateColumn Header="Ctrl" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Ctrl, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Shift -->
                        <DataGridTemplateColumn Header="Shift" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Shift, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Windows -->
                        <DataGridTemplateColumn Header="Win" Width="30">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Win, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Action -->
                        <DataGridTemplateColumn Header="Action" Width="6*" Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding HotkeyAPI.ActionNames, Source={StaticResource Settings}}" SelectedValue="{Binding Action, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ComboBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Remove -->
                        <DataGridTemplateColumn Width="Auto" Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="❌"
                                            FontFamily="{StaticResource InterFont}"
                                            Width="20"
                                            Height="Auto"
                                            Background="#00000000"
                                            Foreground="#FF4456"
                                            FocusVisualStyle="{x:Null}"
                                            Click="Handle_HotkeyGridRemoveClick"
                                            BorderThickness="0"
                                            CommandParameter="{Binding ID}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <Button Grid.Row="1"
                        Margin="2,2"
                        Content="Create New Hotkey"
                        Click="Handle_CreateNewHotkeyClick"
                        Visibility="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Style="{StaticResource ButtonStyle}"/>
            </Grid>
        </TabItem>
        <!--▲ Hotkeys Tab ▲-->


        <!--▼ Settings Tab ▼-->
        <TabItem Header="Settings" Name="SettingsTab">
            <Grid HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch">
                <!-- Settings Tab Grid Column / Row Definitions-->
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Version Label -->
                <Canvas Grid.Column="3"
                          Grid.Row="1"
                        Width="{Binding Width, ElementName=versionLabel}"
                        Height="{Binding Height, ElementName=versionLabel}">
                    <Label x:Name="versionLabel"
                           Canvas.Top="-25"
                           Canvas.Right="0"
                           HorizontalAlignment="Right"
                           Style="{StaticResource LabelStyle}"
                           Height="Auto"
                           VerticalContentAlignment="Center"
                           Foreground="Gainsboro"
                           FontSize="9"
                           Content="[version]"
                           Margin="0,-4,0,0"/>
                </Canvas>

                <!-- Device Selection -->
                <Grid Grid.Row="1"
                      Grid.ColumnSpan="4"
                      Margin="0,0,-3,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="4"/>
                    </Grid.ColumnDefinitions>
                    <Label Content="Device"
                           Style="{StaticResource LabelStyle}"
                           IsEnabled="{Binding IsChecked, ElementName=cbAllDevices, Converter={StaticResource InvertConverter}}"/>
                    <ComboBox x:Name="DeviceSelectorBox"
                              Grid.Column="1"
                              Style="{StaticResource ComboBoxStyle}"
                              ItemsSource="{Binding AudioAPI.Devices, BindsDirectlyToSource=True}"
                              SelectedItem="{Binding AudioAPI.SelectedDevice, UpdateSourceTrigger=LostFocus}"
                              DataContext="{StaticResource Settings}"
                              ToolTip="Selects the target audio device. If this is set, only sessions playing on the selected device are shown in the mixer."
                              VerticalAlignment="Center"
                              IsEnabled="{Binding IsChecked, ElementName=cbAllDevices, Converter={StaticResource InvertConverter}}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="20"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Name, Mode=OneWay}" Style="{StaticResource TextBlockStyle}"/>
                                    <Image Grid.Column="1" HorizontalAlignment="Right" Source="{Binding Icon, Mode=OneWay}" Style="{StaticResource IconImageStyle}"
                                           Visibility="{Binding ShowIcons, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                </Grid>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    <Button Grid.Column="3"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            BorderThickness="0"
                            Width="22"
                            Height="22"
                            Background="#00000000"
                            Style="{StaticResource ButtonStyle}"
                            Click="Handle_ReloadDevicesClick">
                        <Button.Content>
                            <Image Source="/Resources/images/reload-white.png"/>
                        </Button.Content>
                    </Button>
                    <CheckBox x:Name="cbAllDevices"
                              Grid.Column="4"
                              Content="Check All Devices"
                              ToolTip="When this is checked, the device dropdown is ignored and all devices are used instead."
                              IsChecked="{Binding AudioAPI.CheckAllDevices, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, BindsDirectlyToSource=True}"
                              DataContext="{StaticResource Settings}"
                              Style="{StaticResource CheckBoxStyle}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Margin="5,0"/>
                </Grid>
                <Border Grid.Row="1"
                        Grid.ColumnSpan="3"
                        BorderBrush="LightGray"
                        BorderThickness="0,0,0,1"/>

                <Grid Grid.ColumnSpan="3"
                      Grid.Row="3"
                      Margin="5,3,2,3"
                      VerticalAlignment="Center">
                    <!-- Main Column & Row Definitions -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="3.8*"/>
                        <ColumnDefinition Width="5*"/>
                        <ColumnDefinition Width="5*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Show in Taskbar Cell -->
                    <CheckBox Content="Show in Taskbar"
                              HorizontalAlignment="Left"
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding ShowInTaskbar, ElementName=window, UpdateSourceTrigger=PropertyChanged}"/>
                    <!-- Always On Top Cell -->
                    <CheckBox Content="Always on Top"
                              Grid.Row="1"
                              HorizontalAlignment="Left"
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding Topmost, ElementName=window, UpdateSourceTrigger=PropertyChanged}"/>


                    <!-- Run At Startup Cell -->
                    <CheckBox x:Name="cbRunAtStartup"
                              Grid.Column="1"
                              Content="Run at Startup"
                              HorizontalAlignment="Left"
                              Margin="5,3"
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding RunAtStartup, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"/>
                    <!-- Start Minimized Cell -->
                    <CheckBox x:Name="cbStartMinimized"
                              Grid.Column="1"
                              Grid.Row="1"
                              Content="Start Minimized"
                              HorizontalAlignment="Left"
                              Margin="5,3"
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding StartMinimized, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"/>

                    <!-- Advanced Hotkeys Cell -->
                    <CheckBox x:Name="cbAdvancedHotkeys"
                              Margin="0,0,0,3"
                              Grid.ColumnSpan="1"
                              Grid.Row="2"
                              HorizontalAlignment="Left"
                              Content="Advanced Hotkeys"
                              ToolTip="This allows you to add, remove, and rename hotkeys &amp; their action bindings."
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding AdvancedHotkeyMode, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"/>
                    <!-- Reset Hotkeys Cell -->
                    <Button x:Name="bResetHotkeys"
                            Margin="3,0,3,3"
                            Grid.Column="1"
                            Grid.Row="2"
                            ToolTip="Resets all Hotkeys to their default values. (Requires confirmation)"
                            Content="Reset Hotkeys"
                            Style="{StaticResource ButtonStyle}"
                            Click="Handle_ResetHotkeysClick"/>

                    <!-- Notifications Cell -->
                    <Grid Grid.Row="1" 
                          Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="3"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <!-- Enable Notifications Checkbox Control -->
                        <CheckBox x:Name="cbEnableNotifications"
                                  Content="Notifications"
                                  ToolTip="The notification appears when switching target sessions using hotkeys."
                                  IsChecked="{Binding Enabled, Source={StaticResource Notification}, UpdateSourceTrigger=PropertyChanged}"
                                  Margin="3,0,0,0"
                                  Style="{StaticResource CheckBoxStyle}"/>
                        <!-- Timeout Numeric Up Down Control -->
                        <Controls:NumericUpDown Grid.Column="2"
                                                Style="{StaticResource NumericUpDownStyle}"
                                                Width="66"
                                                Height="22"
                                                Margin="0,1,0,1"
                                                ToolTip="The time in milliseconds before the notification disappears after being displayed."
                                                DecimalPlaces="0"
                                                MinValue="250"
                                                MaxValue="60000"
                                                Value="{Binding TimeoutInterval, Mode=TwoWay, Source={StaticResource Notification}, UpdateSourceTrigger=PropertyChanged}"/>
                    </Grid>

                    <!-- Show Icons Cell -->
                    <CheckBox x:Name="cbShowIcons"
                              Grid.Column="2"
                              HorizontalAlignment="Left"
                              Margin="3,0,0,0"
                              Content="Show Icons"
                              ToolTip="Determines whether or not icons are shown for audio devices and sessions."
                              Style="{StaticResource CheckBoxStyle}"
                              IsChecked="{Binding ShowIcons, Source={StaticResource Settings}, UpdateSourceTrigger=PropertyChanged}"/>
                    <!-- Open Github Cell -->
                    <Button x:Name="bOpenGithub"
                            Content="Github Repository"
                            Margin="3,0,3,3"
                            Grid.Column="2"
                            Grid.Row="2"
                            ToolTip="Opens the default web browser."
                            Style="{StaticResource ButtonStyle}"
                            Click="Handle_OpenGithubClick"/>
                </Grid>
                <Border Grid.Row="3"
                        Grid.ColumnSpan="3"
                        BorderBrush="LightGray"
                        BorderThickness="0,0,0,1"/>

                <!-- Log Settings -->
                <DockPanel Grid.ColumnSpan="3"
                           Grid.Row="4" Margin="0,5,0,2">
                    <!-- Enable Log -->
                    <CheckBox x:Name="cbEnableLog"
                              Content="Enable Log"
                              Margin="5,2"
                              VerticalAlignment="Center"
                              d:IsEnabled="True"
                              IsEnabled="{Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource InvertConverter}}"
                              IsChecked="{Binding LogEnabled, ElementName=window, UpdateSourceTrigger=PropertyChanged}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <!-- LogPath Browse Button -->
                    <Button DockPanel.Dock="Right"
                            Content="Browse"
                            Style="{StaticResource ButtonStyle}"
                            Click="Handle_BrowseForLogFilePathClick"/>
                    <!-- Log Filter Level Setter -->
                    <Grid>
                        <Grid.Resources>
                            <DataTemplate x:Key="DropDownItemTemplate" DataType="wpfApplication1:ItemSourceModel">
                                <CheckBox Content="{Binding Name, Mode=OneWay}" IsChecked="{Binding IsSet, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </DataTemplate>
                            <DataTemplate x:Key="SelectionBoxTemplate"/>
                            <DataTemplate x:Key="ComboBoxTemplate">
                                <ContentPresenter x:Name="Presenter" Content="{Binding}" ContentTemplate="{StaticResource DropDownItemTemplate}" />
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor,ComboBoxItem,1}}" Value="{x:Null}">
                                        <Setter TargetName="Presenter" Property="ContentTemplate" Value="{StaticResource SelectionBoxTemplate}" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>

                            <Style x:Key="ExtendedWatermarkTextBlockStyle" BasedOn="{StaticResource WatermarkTextBlockStyle}" TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                                        <Setter Property="Foreground" Value="#9A9A9A"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True">
                                        <Setter Property="Foreground" Value="Black"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <TextBlock x:Name="logFilterComboBoxWatermark"
                                   Panel.ZIndex="1"
                                   Margin="5,0,24,0"
                                   Padding="0,0,5,0"
                                   Text="Filter"
                                   IsEnabled="{Controls:MultiBinding {Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource InvertConverter}}, {Binding IsChecked, ElementName=cbEnableLog}, Converter={StaticResource MultiBindingBooleanConverter}}"
                                   Style="{StaticResource ExtendedWatermarkTextBlockStyle}"/>
                        <ComboBox x:Name="logFilterComboBox"
                                  Panel.ZIndex="0"
                                  IsEditable="False"
                                  ToolTip="Allows you to specify which types of log messages are printed."
                                  Margin="0,0,5,0"
                                  IsEnabled="{Controls:MultiBinding {Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource InvertConverter}}, {Binding IsChecked, ElementName=cbEnableLog}, Converter={StaticResource MultiBindingBooleanConverter}}"
                                  ItemsSource="{StaticResource EventTypeOptions}"
                                  Text="Filter"
                                  Style="{StaticResource ComboBoxStyle}"
                                  ItemTemplate="{StaticResource ComboBoxTemplate}"
                                  BorderThickness="1">
                        </ComboBox>
                    </Grid>
                    <!-- Log Path Textbox -->
                    <Grid>
                        <Grid.Resources>
                            <Style x:Key="TextBoxValidIndicatorStyle" TargetType="TextBox" BasedOn="{StaticResource TextBoxStyle}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Text.IsEmpty, Mode=OneWay, Source={x:Reference logPath}}" Value="True">
                                        <Setter Property="Background" Value="#3F3030"/>
                                        <Setter Property="ToolTip" Value="Logging is disabled because this is blank."/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <TextBox x:Name="logPath"
                                 Text="{Binding LogFilePath, ElementName=window, UpdateSourceTrigger=LostFocus}"
                                 Style="{StaticResource TextBoxValidIndicatorStyle}"/>
                        <TextBlock Text="Path to Log File"
                                   Width="{Binding Width, ElementName=logPath}"
                                   Height="{Binding Height, ElementName=logPath}"
                                   Margin="5,0"
                                   Grid.Column="1"
                                   Style="{StaticResource WatermarkTextBlockStyle}"
                                   d:Visibility="Collapsed"
                                   Visibility="{Binding Text.IsEmpty, Mode=OneWay, ElementName=logPath, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Grid>
                </DockPanel>
            </Grid>
        </TabItem>
        <!--▲ Settings Tab ▲-->
    </ctrlz:TabControlEx>
</Window>
