<Window
    x:Class="VolumeControl.ListNotification"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:VolumeControl.WPF.Converters;assembly=VolumeControl.WPF"
    xmlns:core="clr-namespace:VolumeControl.Core;assembly=VolumeControl.Core"
    xmlns:coreEnum="clr-namespace:VolumeControl.Core.Enum;assembly=VolumeControl.Core"
    xmlns:coreInterfaces="clr-namespace:VolumeControl.Core.Interfaces;assembly=VolumeControl.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System.Windows;assembly=PresentationFramework"
    x:Name="lnotifWindow"
    Title="ListNotification"
    AllowsTransparency="True"
    Closing="lnotifWindow_Closing"
    DataContext="{RelativeSource Self}"
    Focusable="False"
    FontFamily="{StaticResource InterFont}"
    Loaded="lnotifWindow_Loaded"
    MouseDown="lnotifWindow_MouseDown"
    MouseEnter="lnotifWindow_MouseEnter"
    MouseLeave="lnotifWindow_MouseLeave"
    ResizeMode="NoResize"
    ShowActivated="False"
    ShowInTaskbar="False"
    SizeToContent="WidthAndHeight"
    SnapsToDevicePixels="True"
    Topmost="True"
    WindowStartupLocation="Manual"
    WindowStyle="None"
    mc:Ignorable="d">
    <Window.Resources>
        <ResourceDictionary>
            <!--  Expander Style  -->
            <Style BasedOn="{StaticResource ExpanderStyle}" TargetType="{x:Type Expander}" />
            <!--  ListView style  -->
            <Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Background" Value="#0000" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource CustomFocusVisualStyle}" />
            </Style>
            <!--  CheckBox style provider  -->
            <Style BasedOn="{StaticResource CheckBoxStyle}" TargetType="{x:Type CheckBox}" />
            <!--  TextBox style provider  -->
            <Style BasedOn="{StaticResource TextBoxStyle}" TargetType="{x:Type TextBox}" />

            <SolidColorBrush
                x:Key="panelBrush"
                Opacity="0.75"
                Color="{StaticResource WindowBackgroundColor}" />

            <Storyboard x:Key="FadeInStoryboard" Completed="fadeInWindowStoryboard_Completed">
                <DoubleAnimation
                    FillBehavior="HoldEnd"
                    Storyboard.TargetProperty="Opacity"
                    From="0.0"
                    To="1.0"
                    Duration="{Binding ListNotificationVM.FadeInDuration, Source={StaticResource Settings}}" />
            </Storyboard>
            <Storyboard x:Key="FadeOutStoryboard" Completed="fadeOutWindowStoryboard_Completed">
                <DoubleAnimation
                    FillBehavior="Stop"
                    Storyboard.TargetProperty="Opacity"
                    From="1.0"
                    To="0.0"
                    Duration="{Binding ListNotificationVM.FadeOutDuration, Source={StaticResource Settings}}" />
            </Storyboard>


            <conv:ConverterChain x:Key="InvertedBooleanToVisibilityConverter">
                <conv:BooleanInverter />
                <BooleanToVisibilityConverter />
            </conv:ConverterChain>
            <conv:ConverterChain x:Key="ArrayHasItemsVisibilityConverter">
                <conv:ArrayHasItemsBooleanConverter />
                <BooleanToVisibilityConverter />
            </conv:ConverterChain>
        </ResourceDictionary>
    </Window.Resources>
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="Background" Value="{StaticResource TabBackgroundBrush}" />
            <!--<Setter Property="Background" Value="{Binding ListNotificationVM.Background, Source={StaticResource Settings}, Mode=OneWay}" />-->
        </Style>
    </Window.Style>

    <Grid x:Name="outerPanel">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Border
            Grid.RowSpan="3"
            BorderBrush="{StaticResource WindowBorderBrush}"
            BorderThickness="4" />

        <!--  Options Expander  -->
        <Grid
            Grid.Row="0"
            Margin="10,8,10,0"
            Visibility="{Binding IsMouseOver, ElementName=lnotifWindow, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Expander x:Name="displayTargetExpander" Header="{Tr 'VolumeControl.ListNotification.Options.Header', DefaultText='Options'}">
                <Grid Margin="0,2,0,0">
                    <Border
                        Name="expanderPanelMask"
                        Background="{StaticResource panelBrush}"
                        Style="{StaticResource RoundBorderMaskStyle}" />
                    <WrapPanel
                        MaxWidth="{Binding ActualWidth, ElementName=listView}"
                        Margin="3,3"
                        Background="{StaticResource panelBrush}"
                        DataContext="{Binding ListNotificationVM, Source={StaticResource Settings}}">
                        <WrapPanel.OpacityMask>
                            <VisualBrush Visual="{Binding ElementName=expanderPanelMask}" />
                        </WrapPanel.OpacityMask>
                        <!--<CheckBox
                        Margin="5,3"
                        Content="{Tr 'VolumeControl.ListNotification.Options.ShowControls.Content',
                                     DefaultText='Show Controls'}"
                        IsChecked="{Binding ShowsCustomControls, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{Tr 'VolumeControl.ListNotification.Options.ShowControls.Tooltip',
                                     DefaultText='Toggles the visibility of advanced controls next to list items.'}" />
                        -->
                        <CheckBox
                            Margin="5,3"
                            Content="{Tr 'VolumeControl.ListNotification.Options.DragRequiresAlt.Content',
                                         DefaultText='Drag Requires Alt'}"
                            IsChecked="{Binding DragRequiresAlt, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="{Tr 'VolumeControl.ListNotification.Options.DragRequiresAlt.Tooltip',
                                         DefaultText='When checked, the ALT key must be held down in order to drag the notification window around with the mouse.'}" />
                        <CheckBox
                            Margin="5,3"
                            Content="{Tr 'VolumeControl.ListNotification.Options.SavePosition.Tooltip',
                                         DefaultText='Save Position'}"
                            IsChecked="{Binding SavesPosition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            ToolTip="{Tr 'VolumeControl.ListNotification.Options.SavePosition.Tooltip',
                                         DefaultText=' '}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" MinWidth="20" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <!--  Fade In:  -->
                            <CheckBox
                                x:Name="doFadeInCheckBox"
                                Margin="5,3"
                                HorizontalAlignment="Left"
                                Content="{Tr 'VolumeControl.ListNotification.Options.DoFadeIn.Content',
                                             DefaultText='Fade In'}"
                                IsChecked="{Binding DoFadeIn}"
                                ToolTip="{Tr 'VolumeControl.ListNotification.Options.DoFadeIn.Tooltip',
                                             DefaultText='When checked, the notification window shows a fade-in animation instead of instantly appearing.'}" />
                            <TextBox
                                Grid.Column="1"
                                Margin="5,1"
                                IsEnabled="{Binding IsChecked, ElementName=doFadeInCheckBox}"
                                Text="{Binding FadeInDuration, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                ToolTip="{Tr 'VolumeControl.ListNotification.Options.FadeOut.Tooltip',
                                             DefaultText='Specifies the duration of the fade-out animation in milliseconds.'}" />
                            <!--  Fade Out:  -->
                            <CheckBox
                                x:Name="doFadeOutCheckBox"
                                Grid.Row="1"
                                Margin="5,3"
                                HorizontalAlignment="Left"
                                Content="{Tr 'VolumeControl.ListNotification.Options.DoFadeOut.Content',
                                             DefaultText='Fade Out'}"
                                IsChecked="{Binding DoFadeOut}"
                                ToolTip="{Tr 'VolumeControl.ListNotification.Options.DoFadeOut.Tooltip',
                                             DefaultText='When checked, the notification window shows a fade-out animation instead of instantly disappearing.'}" />
                            <TextBox
                                Grid.Row="1"
                                Grid.Column="1"
                                Margin="5,1"
                                IsEnabled="{Binding IsChecked, ElementName=doFadeOutCheckBox}"
                                Text="{Binding FadeOutDuration, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                ToolTip="{Tr 'VolumeControl.ListNotification.Options.FadeOut.Tooltip',
                                             DefaultText='Specifies the duration of the fade-out animation in milliseconds.'}" />
                        </Grid>
                    </WrapPanel>
                </Grid>
            </Expander>
        </Grid>

        <!--  Outer Layout Grid Control  -->
        <Grid Grid.Row="1" Margin="10,5">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <ListView
                Name="listView"
                Grid.Row="0"
                Margin="3,2"
                Background="{StaticResource panelBrush}"
                Focusable="{Binding ListNotificationVM.LockSelection, Source={StaticResource Settings}, Mode=OneWay, Converter={StaticResource InvertConverter}}"
                ItemsSource="{Binding ListNotificationVM.ItemsSource, Source={StaticResource Settings}, Mode=OneWay}"
                MouseDown="lnotifWindow_MouseDown"
                PreviewMouseDown="listView_PreviewMouseDown"
                SelectedItem="{Binding ListNotificationVM.SelectedItem, Source={StaticResource Settings}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                Style="{StaticResource ListViewStyle}">
                <ListView.ItemContainerStyle>
                    <!--  ListViewItem style  -->
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                                <Setter Property="Background" Value="{Binding ListNotificationVM.Background, Source={StaticResource Settings}, Mode=OneWay}" />
                                <Setter Property="FontWeight" Value="Bold" />
                            </DataTrigger>
                        </Style.Triggers>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <EventSetter Event="MouseDown" Handler="lnotifWindow_MouseDown" />
                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        <Setter Property="Focusable" Value="{Binding ListNotificationVM.LockSelection, Source={StaticResource Settings}, Mode=OneWay, Converter={StaticResource InvertConverter}}" />
                        <Setter Property="Padding" Value="6,2" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Border
                                        Padding="{TemplateBinding Padding}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        FocusVisualStyle="{TemplateBinding FocusVisualStyle}">
                                        <ContentPresenter
                                            Content="{TemplateBinding Content}"
                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate DataType="{x:Type coreInterfaces:IListDisplayable}">
                        <Grid Margin="3,1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--  DisplayIcon  -->
                            <Image
                                Grid.Column="0"
                                Width="{Binding Height, RelativeSource={RelativeSource Self}}"
                                Margin="2,1,5,2"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                Source="{Binding DisplayIcon}"
                                Visibility="{Binding ShowIcons, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <!--  DisplayText  -->
                            <TextBlock
                                Grid.Column="1"
                                Margin="5,3"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                Style="{StaticResource TextBlockStyle}"
                                Text="{Binding DisplayText}" />

                            <!--  DisplayControls  -->
                            <!--<StackPanel
                                Name="displayableControlsTemplate"
                                Grid.Column="2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Loaded="displayableControlsTemplate_Loaded"
                                Orientation="Horizontal"
                                Tag="{Binding DisplayControls}"
                                Unloaded="displayableControlsTemplate_Unloaded"
                                Visibility="{Binding ListNotificationVM.ShowsCustomControls, Source={StaticResource Settings}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            -->
                        </Grid>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>

            <Grid
                Grid.Row="1"
                Margin="1"
                HorizontalAlignment="Center"
                DataContext="{Binding ListNotificationVM, Source={StaticResource Settings}}"
                Visibility="{Binding SelectedItemControls, Mode=OneWay, Converter={StaticResource ArrayHasItemsVisibilityConverter}}">
                <StackPanel
                    x:Name="selectedItemControlsTemplate"
                    HorizontalAlignment="Stretch"
                    Loaded="displayableControlsTemplate_Loaded"
                    Orientation="Horizontal"
                    Tag="{Binding SelectedItemControls}"
                    Unloaded="displayableControlsTemplate_Unloaded" />
            </Grid>
        </Grid>
    </Grid>

    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="0"
            CornerRadius="{StaticResource RoundedWindowCorner}"
            GlassFrameThickness="0" />
    </WindowChrome.WindowChrome>
</Window>
