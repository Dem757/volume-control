<Window x:Name="window"
        x:Class="VolumeControl.Mixer"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:VolumeControl.WPF;assembly=VolumeControl.WPF"
        xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
        mc:Ignorable="d"
        Title="Volume Control"
        DataContext="{RelativeSource Self}"
        Icon="/Resources/icons/icon-16x16-VC.ico"
        Closing="Window_Closing">
    <Window.Background>
        <SolidColorBrush Color="#303030"/>
    </Window.Background>
    <Window.Style>
        <!-- Set Window Style Properties -->
        <Style TargetType="Window">
            <Setter Property="SizeToContent" Value="Height"/>
            <Setter Property="WindowStyle" Value="SingleBorderWindow"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Width" Value="500"/>
            <Setter Property="UseLayoutRounding" Value="True"/>
            <Setter Property="ResizeMode" Value="CanMinimize"/>
        </Style>
    </Window.Style>

    <!--( Static Resources )-->
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="VolumeControlResources.xaml"/>
                <!-- Merge Resource Dictionary -->
            </ResourceDictionary.MergedDictionaries>


            <!-- CheckBox -->
            <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Background" Value="WhiteSmoke"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>
            <!-- Button -->
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="Padding" Value="5,1,5,1"/>
                <Setter Property="Margin" Value="3,0,3,0"/>
                <Setter Property="Height" Value="23"/>
                <Setter Property="Foreground" Value="#050505"/>
            </Style>
            <!-- TextBox -->
            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="Background" Value="#454545"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="SelectionBrush" Value="#569DE5"/>
                <Setter Property="SelectionOpacity" Value="0.5"/>
            </Style>
            <!-- Label -->
            <Style x:Key="LabelStyle" TargetType="Label">
                <Style.Triggers>
                    <!-- Change the color of label text when disabled to something visible -->
                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="LightGray"/>
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
            <!-- Mixer Volume TextBox -->
            <Style x:Key="MixerVolumeTextBoxStyle" BasedOn="{StaticResource TextBoxStyle}" TargetType="TextBox">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="26"/>
            </Style>
            <!-- Mixer Column Header -->
            <Style x:Key="MixerHeadersStyle" TargetType="DataGridColumnHeader">
                <Setter Property="FontWeight" Value="SemiBold"/>
                <Setter Property="Height" Value="24"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>
            <!-- Mixer Cell -->
            <Style x:Key="MixerCellStyle" TargetType="DataGridCell">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
            </Style>
            <!-- Mixer Volume Slider -->
            <Style x:Key="MixerVolumeSliderStyle" TargetType="Slider">
                <Setter Property="Background" Value="Transparent"/>
            </Style>
            <!-- Mixer -->
            <Style x:Key="DataGridStyle" TargetType="DataGrid">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="RowBackground" Value="#303030"/>
                <Setter Property="AlternatingRowBackground" Value="#454545"/>
                <Setter Property="ColumnHeaderStyle" Value="{StaticResource MixerHeadersStyle}"/>
                <Setter Property="CellStyle" Value="{StaticResource MixerCellStyle}"/>
                <Setter Property="AlternationCount" Value="1"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="SelectionUnit" Value="Cell"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="GridLinesVisibility" Value="Horizontal"/>
            </Style>
            <!-- NumericUpDown -->
            <Style x:Key="NumericUpDownStyle" TargetType="Controls:NumericUpDown">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>

                <Setter Property="Height" Value="23"/>
                <Setter Property="Margin" Value="3,0,3,0"/>
            </Style>
            <!-- TabControl -->
            <Style x:Key="TabControlStyle" TargetType="TabControl">
                <Setter Property="Background" Value="#505055"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
            </Style>
            <!-- ComboBox -->
            <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
                <Setter Property="AlternationCount" Value="1"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="IsTextSearchCaseSensitive" Value="False"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="21"/>
            </Style>
        </ResourceDictionary>
    </Window.Resources>



    <!--( Element Layout )-->
    <TabControl Style="{StaticResource TabControlStyle}" SelectionChanged="Handle_TabControlChange">
        <TabControl.Resources>
            <Style TargetType="TabItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" Margin="1,0">
                                <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        TextBlock.Foreground="WhiteSmoke"
                                        TextBlock.FontSize="12"
                                        Margin="10,2"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="#505055" />
                                    <Setter TargetName="Border" Property="Margin" Value="1,-2" />
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="WhiteSmoke"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="ExtraBold"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="#303030"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.Foreground" Value="LightGray"/>
                                    <Setter TargetName="ContentSite" Property="TextBlock.FontWeight" Value="Regular"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </TabControl.Resources>


        <!--▼ Mixer ▼-->
        <TabItem Header="Mixer" Name="MixerTab">
            <Grid HorizontalAlignment="Center"
                  VerticalAlignment="Top"
                  UseLayoutRounding="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3"/>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="3"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="3"/>
                </Grid.RowDefinitions>

                <!--- [Row-1] Target Selection -->
                <Grid x:Name="targetSelectionRow"
                      Grid.Column="1"
                      Grid.Row="1"
                      Height="25"
                      HorizontalAlignment="Center"
                      Width="{Binding ElementName=window, Path=ActualWidth, BindsDirectlyToSource=True, Mode=OneWay}"
                      Margin="3,3,3,0">

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="14"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="6"/>
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="targetNameTextBox"
                             Grid.Column="1"
                             TextWrapping="NoWrap"
                             Margin="3,0,3,0"
                             VerticalContentAlignment="Center"
                             VerticalAlignment="Center"
                             HorizontalAlignment="Stretch"
                             Height="23"
                             TabIndex="0"
                             ToolTip="You can enter the Process ID or Process Name of any valid audio session here. Click the 'Set Target' button to apply the changes."
                             Text="{Binding Target, Mode=TwoWay, NotifyOnSourceUpdated=True, UpdateSourceTrigger=LostFocus, BindsDirectlyToSource=True, IsAsync=True}"
                             DataContext="{StaticResource AudioAPI}"
                             IsEnabled="{c:Binding ElementName=cbLockTargetSelection, Path=!IsChecked}"
                             Style="{StaticResource TextBoxStyle}"/>
                    <!--▲ TEXTBOX WATERMARK ▼-->
                    <TextBlock Margin="7,3"
                               Grid.Column="1"
                               Text="Target PID or Process Name"
                               IsHitTestVisible="False"
                               Foreground="Gray"
                               Visibility="{Binding Text.IsEmpty, ElementName=targetNameTextBox, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <CheckBox x:Name="cbLockTargetSelection"
                              Grid.Row="0"
                              Grid.Column="2"
                              Content="Lock"
                              Width="52"
                              Height="Auto"
                              TabIndex="1"
                              Margin="2,0,0,0"
                              DataContext="{StaticResource AudioAPI}"
                              IsChecked="{Binding LockSelectedSession, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                              Style="{StaticResource CheckBoxStyle}"/>
                </Grid>

                <!--- [Row-3] Mixer Controls & Misc -->
                <Grid x:Name="mixerControlsRow" 
                      Grid.Row="3"
                      Grid.Column="1"
                      Height="29"
                      Margin="3,-2,3,1"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center">
                    <Grid.Background>
                        <SolidColorBrush Color="#454545" Opacity="0.77"/>

                    </Grid.Background>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="2"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="2"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="2"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="2"/>
                    </Grid.ColumnDefinitions>
                    <Button x:Name="bReload"
                            Grid.Column="1"
                            Grid.Row="1"
                            Content="Reload"
                            ToolTip=""
                            Click="Handle_ReloadClick"
                            TabIndex="2"
                            Style="{StaticResource ButtonStyle}"/>
                    <CheckBox x:Name="cbReloadOnHotkey"
                              Grid.Column="2"
                              Grid.Row="1"
                              VerticalAlignment="Center"
                              Content="On Hotkey"
                              ToolTip="Reloads the mixer sessions when the 'Next Target'/'Previous Target' hotkeys are pressed."
                              Margin="3,0,3,0"
                              IsChecked="{Binding ReloadOnHotkey, BindsDirectlyToSource=True, Mode=TwoWay}"
                              TabIndex="3"
                              ClickMode="Press"
                              DataContext="{StaticResource AudioAPI}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <CheckBox x:Name="cbReloadOnInterval"
                              Grid.Column="3"
                              Grid.Row="1"
                              Content="Automatic"
                              ToolTip="Automatically reloads the mixer sessions on an interval."
                              IsChecked="{Binding ReloadOnInterval, BindsDirectlyToSource=True, Mode=TwoWay}"
                              TabIndex="4"
                              ClickMode="Press"
                              DataContext="{StaticResource AudioAPI}"
                              Style="{StaticResource CheckBoxStyle}"/>
                    <Controls:NumericUpDown HorizontalAlignment="Left"
                                            Grid.Column="4"
                                            Grid.Row="1"
                                            Width="60"
                                            Height="23"
                                            Margin="3,0,0,0"
                                            ToolTip="Reload Interval in Milliseconds"
                                            TabIndex="5"
                                            MaxDecimalPlaces="0"
                                            IsEnabled="{Binding ElementName=cbReloadOnInterval, Path=IsChecked, UpdateSourceTrigger=PropertyChanged, FallbackValue=3000}"
                                            MinValue="{Binding ReloadIntervalMin}"
                                            MaxValue="{Binding ReloadIntervalMax}"
                                            Value="{Binding ReloadInterval, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                            DataContext="{StaticResource AudioAPI}"
                                            Style="{StaticResource NumericUpDownStyle}"/>
                </Grid>

                <!--- [Row-5] Mixer Data Grid -->
                <DataGrid x:Name="MixerGrid"
                          ItemsSource="{Binding Sessions}"
                          Grid.Column="1"
                          Grid.Row="5"
                          AutoGenerateColumns="False"
                          Style="{StaticResource DataGridStyle}"
                          DataContext="{StaticResource AudioAPI}">
                    <DataGrid.Columns>
                        <!-- PID -->
                        <DataGridTextColumn Header="PID" Binding="{Binding PID, Mode=OneTime}" IsReadOnly="True"/>
                        <!-- Process Name -->
                        <DataGridTextColumn Header="Process Name" Width="*" Binding="{Binding ProcessName, Mode=OneWay}" IsReadOnly="True"/>
                        <!-- Mute -->
                        <DataGridTemplateColumn Header="Mute" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Muted, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Volume -->
                        <DataGridTemplateColumn Header="Volume" Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid VerticalAlignment="Center" Margin="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <!-- Slider -->
                                            <ColumnDefinition Width="2"/>
                                            <!-- Divider -->
                                            <ColumnDefinition Width="Auto"/>
                                            <!-- TextBox -->
                                        </Grid.ColumnDefinitions>
                                        <!-- Slider -->
                                        <Slider x:Name="dgVolumeSlider" Grid.Column="0" Minimum="0" Maximum="100" Value="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SmallChange="1" LargeChange="5" Style="{StaticResource MixerVolumeSliderStyle}"/>
                                        <!-- TextBox -->
                                        <TextBox x:Name="dgVolumeTextBox" Grid.Column="2" Text="{Binding Volume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource MixerVolumeTextBoxStyle}"/>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Select -->
                        <DataGridTemplateColumn Header="" Width="Auto" IsReadOnly="True">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Click="Handle_ProcessSelectClick" 
                                    Content="Select"
                                    Padding="3,1,3,1"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>

            </Grid>
        </TabItem>
        <!--▲ Mixer ▲-->


        <!--▼ Hotkeys ▼-->
        <TabItem Header="Hotkeys" Name="HotkeysTab">
            <DockPanel>
                <!-- HotkeyGrid -->
                <DataGrid x:Name="HotkeyGrid"
                          DockPanel.Dock="Top"
                          Padding="1"
                          AutoGenerateColumns="False"
                          DataContext="{StaticResource HotkeyAPI}"
                          ItemsSource="{Binding Hotkeys, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                          Style="{StaticResource DataGridStyle}">

                    <DataGrid.Columns>
                        <!-- Active -->
                        <DataGridTemplateColumn Header="Enabled" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <!-- Visibility="{Binding Valid, Converter={StaticResource BooleanToVisibilityConverter}}" -->
                                    <CheckBox IsEnabled="{Binding Valid}" IsChecked="{Binding Registered, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Name -->
                        <DataGridTextColumn Header="Name" Width="10*" IsReadOnly="{c:Binding Path=!IsChecked, Source={x:Reference cbAdvancedHotkeys}}" Binding="{Binding Name, UpdateSourceTrigger=LostFocus}" CellStyle="{StaticResource MixerCellStyle}"/>
                        <!-- Key -->
                        <DataGridTemplateColumn Header="Key" Width="6*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{StaticResource KeyOptions}" SelectedValue="{Binding Key, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ComboBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Alt -->
                        <DataGridTemplateColumn Header=" Alt " Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Alt, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Ctrl -->
                        <DataGridTemplateColumn Header="Ctrl " Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Ctrl, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Shift -->
                        <DataGridTemplateColumn Header="Shift" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Shift, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Windows -->
                        <DataGridTemplateColumn Header=" Win " Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Win, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Action -->
                        <DataGridTemplateColumn Header="Action" Width="6*" Visibility="{Binding Source={x:Reference cbAdvancedHotkeys}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ComboBox ItemsSource="{Binding ActionNames, Source={StaticResource HotkeyAPI}}" SelectedValue="{Binding Action, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ComboBoxStyle}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <!-- Remove -->
                        <DataGridTemplateColumn Width="Auto" Visibility="{Binding Source={x:Reference cbAdvancedHotkeys}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button Content="❌"
                                            Width="20"
                                            Height="Auto"
                                            Background="Transparent"
                                            Click="Handle_HotkeyGridRemoveClick"
                                            CommandParameter="{Binding ID}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <!-- Create New Hotkey -->
                <Grid DockPanel.Dock="Bottom"
                      Visibility="{Binding Path=IsChecked, Source={x:Reference cbAdvancedHotkeys}, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button Content="Create New Hotkey"
                            Click="Handle_CreateNewHotkeyClick"
                            Style="{StaticResource ButtonStyle}"/>
                </Grid>
            </DockPanel>
        </TabItem>
        <!--▲ Hotkeys ▲-->


        <!--▼ Settings ▼-->
        <TabItem Header="Settings" Name="SettingsTab">
            <Grid HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="3"/>
                </Grid.RowDefinitions>

                <CheckBox x:Name="cbAdvancedHotkeys"
                          Grid.Column="0"
                          Content="Advanced Hotkeys Mode"
                          ToolTip="This allows you to add, remove, and rename hotkeys &amp; their action bindings."
                          Style="{StaticResource CheckBoxStyle}"
                          Checked="Handle_ShowActionBindingsChecked"
                          Unchecked="Handle_ShowActionBindingsUnchecked"/>
                <Grid Grid.Column="1" ShowGridLines="False" HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.Resources>
                        <Controls:GridLinesRenderer x:Key="GridLinesRenderer"/>
                    </Grid.Resources>

                    <Label Content="Volume Step Size"
                           Grid.Column="0"
                           HorizontalAlignment="Center"
                           Style="{StaticResource LabelStyle}"/>
                    <Controls:NumericUpDown x:Name="VolumeStep"
                                            Grid.Column="1"
                                            HorizontalAlignment="Center"
                                            Width="48"
                                            DecimalPlaces="0"
                                            MinValue="0"
                                            MaxValue="100"
                                            Value="{Binding Source={StaticResource AudioAPI}, Path=VolumeStepSize, UpdateSourceTrigger=PropertyChanged}"
                                            Style="{StaticResource NumericUpDownStyle}"/>
                </Grid>
                <Canvas Grid.Column="2"
                        Width="{Binding Width, ElementName=versionLabel}"
                        Height="{Binding Height, ElementName=versionLabel}">
                    <Label x:Name="versionLabel"
                           Canvas.Top="0"
                           Canvas.Right="0"
                           HorizontalAlignment="Right"
                           Style="{StaticResource LabelStyle}"
                           Height="Auto"
                           VerticalContentAlignment="Center"
                           Foreground="LightGray"
                           FontWeight="SemiBold"
                           FontSize="9"
                           ToolTip="The current version number." Content="[version]" Margin="0,-4,0,0"/>
                </Canvas>

                <Grid Grid.Row="1"
                      Grid.ColumnSpan="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="4"/>
                    </Grid.ColumnDefinitions>
                    <Label Content="Device"
                           Style="{StaticResource LabelStyle}"
                           IsEnabled="{c:Binding !IsChecked, ElementName=cbAllDevices}"/>
                    <ComboBox x:Name="DeviceSelectorBox"
                              Grid.Column="1"
                              Style="{StaticResource ComboBoxStyle}"
                              ItemsSource="{Binding Devices, UpdateSourceTrigger=PropertyChanged, BindsDirectlyToSource=True}"
                              DisplayMemberPath="Name"
                              SelectedItem="{Binding SelectedDevice}"
                              DataContext="{StaticResource AudioAPI}"
                              ToolTip="The Audio Device to bind to."
                              Margin="0,1,0,0"
                              IsEnabled="{c:Binding !IsChecked, ElementName=cbAllDevices}"/>
                    <CheckBox x:Name="cbAllDevices"
                              Grid.Column="3"
                              Content="Check All Devices"
                              ToolTip="When this is checked, the device dropdown is ignored and all devices are used instead."
                              IsChecked="{Binding CheckAllDevices, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, BindsDirectlyToSource=True}"
                              DataContext="{StaticResource AudioAPI}"
                              Style="{StaticResource CheckBoxStyle}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
                    <Button Content="Refresh"
                            Grid.Column="2"
                            Click="Handle_ReloadDevicesClick"
                            Style="{StaticResource ButtonStyle}"
                            IsEnabled="{c:Binding !IsChecked, ElementName=cbAllDevices}"/>
                </Grid>
            </Grid>
        </TabItem>
        <!--▲ Settings ▲-->
    </TabControl>
</Window>
